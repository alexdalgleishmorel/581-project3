{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor2D } from '../utils';\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n  function extractScaleLayerParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\n    var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n  function extractConvLayerParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\n    var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\n    var scale = extractScaleLayerParams(prefix);\n    return {\n      conv: {\n        filters: filters,\n        bias: bias\n      },\n      scale: scale\n    };\n  }\n  function extractResidualLayerParams(prefix) {\n    return {\n      conv1: extractConvLayerParams(prefix + \"/conv1\"),\n      conv2: extractConvLayerParams(prefix + \"/conv2\")\n    };\n  }\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n  var _a = extractorsFactory(weightMap, paramMappings),\n    extractConvLayerParams = _a.extractConvLayerParams,\n    extractResidualLayerParams = _a.extractResidualLayerParams;\n  var conv32_down = extractConvLayerParams('conv32_down');\n  var conv32_1 = extractResidualLayerParams('conv32_1');\n  var conv32_2 = extractResidualLayerParams('conv32_2');\n  var conv32_3 = extractResidualLayerParams('conv32_3');\n  var conv64_down = extractResidualLayerParams('conv64_down');\n  var conv64_1 = extractResidualLayerParams('conv64_1');\n  var conv64_2 = extractResidualLayerParams('conv64_2');\n  var conv64_3 = extractResidualLayerParams('conv64_3');\n  var conv128_down = extractResidualLayerParams('conv128_down');\n  var conv128_1 = extractResidualLayerParams('conv128_1');\n  var conv128_2 = extractResidualLayerParams('conv128_2');\n  var conv256_down = extractResidualLayerParams('conv256_down');\n  var conv256_1 = extractResidualLayerParams('conv256_1');\n  var conv256_2 = extractResidualLayerParams('conv256_2');\n  var conv256_down_out = extractResidualLayerParams('conv256_down_out');\n  var fc = weightMap['fc'];\n  paramMappings.push({\n    originalPath: 'fc',\n    paramPath: 'fc'\n  });\n  if (!isTensor2D(fc)) {\n    throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\n  }\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["disposeUnusedWeightTensors","extractWeightEntryFactory","isTensor2D","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractScaleLayerParams","prefix","weights","biases","extractConvLayerParams","filters","bias","scale","conv","extractResidualLayerParams","conv1","conv2","extractParamsFromWeigthMap","_a","conv32_down","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","fc","push","originalPath","paramPath","Error","params"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/faceRecognitionNet/extractParamsFromWeigthMap.js"],"sourcesContent":["import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\r\nimport { isTensor2D } from '../utils';\r\nfunction extractorsFactory(weightMap, paramMappings) {\r\n    var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\r\n    function extractScaleLayerParams(prefix) {\r\n        var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\r\n        var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\r\n        return { weights: weights, biases: biases };\r\n    }\r\n    function extractConvLayerParams(prefix) {\r\n        var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\r\n        var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\r\n        var scale = extractScaleLayerParams(prefix);\r\n        return { conv: { filters: filters, bias: bias }, scale: scale };\r\n    }\r\n    function extractResidualLayerParams(prefix) {\r\n        return {\r\n            conv1: extractConvLayerParams(prefix + \"/conv1\"),\r\n            conv2: extractConvLayerParams(prefix + \"/conv2\")\r\n        };\r\n    }\r\n    return {\r\n        extractConvLayerParams: extractConvLayerParams,\r\n        extractResidualLayerParams: extractResidualLayerParams\r\n    };\r\n}\r\nexport function extractParamsFromWeigthMap(weightMap) {\r\n    var paramMappings = [];\r\n    var _a = extractorsFactory(weightMap, paramMappings), extractConvLayerParams = _a.extractConvLayerParams, extractResidualLayerParams = _a.extractResidualLayerParams;\r\n    var conv32_down = extractConvLayerParams('conv32_down');\r\n    var conv32_1 = extractResidualLayerParams('conv32_1');\r\n    var conv32_2 = extractResidualLayerParams('conv32_2');\r\n    var conv32_3 = extractResidualLayerParams('conv32_3');\r\n    var conv64_down = extractResidualLayerParams('conv64_down');\r\n    var conv64_1 = extractResidualLayerParams('conv64_1');\r\n    var conv64_2 = extractResidualLayerParams('conv64_2');\r\n    var conv64_3 = extractResidualLayerParams('conv64_3');\r\n    var conv128_down = extractResidualLayerParams('conv128_down');\r\n    var conv128_1 = extractResidualLayerParams('conv128_1');\r\n    var conv128_2 = extractResidualLayerParams('conv128_2');\r\n    var conv256_down = extractResidualLayerParams('conv256_down');\r\n    var conv256_1 = extractResidualLayerParams('conv256_1');\r\n    var conv256_2 = extractResidualLayerParams('conv256_2');\r\n    var conv256_down_out = extractResidualLayerParams('conv256_down_out');\r\n    var fc = weightMap['fc'];\r\n    paramMappings.push({ originalPath: 'fc', paramPath: 'fc' });\r\n    if (!isTensor2D(fc)) {\r\n        throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\r\n    }\r\n    var params = {\r\n        conv32_down: conv32_down,\r\n        conv32_1: conv32_1,\r\n        conv32_2: conv32_2,\r\n        conv32_3: conv32_3,\r\n        conv64_down: conv64_down,\r\n        conv64_1: conv64_1,\r\n        conv64_2: conv64_2,\r\n        conv64_3: conv64_3,\r\n        conv128_down: conv128_down,\r\n        conv128_1: conv128_1,\r\n        conv128_2: conv128_2,\r\n        conv256_down: conv256_down,\r\n        conv256_1: conv256_1,\r\n        conv256_2: conv256_2,\r\n        conv256_down_out: conv256_down_out,\r\n        fc: fc\r\n    };\r\n    disposeUnusedWeightTensors(weightMap, paramMappings);\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}