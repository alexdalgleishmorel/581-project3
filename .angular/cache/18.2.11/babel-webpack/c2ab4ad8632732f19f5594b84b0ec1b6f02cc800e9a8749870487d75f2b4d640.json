{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractWeightsFactory } from '../common';\nimport { isFloat } from '../utils';\nfunction extractorsFactory(extractWeights, paramMappings) {\n  function extractFilterValues(numFilterValues, numFilters, filterSize) {\n    var weights = extractWeights(numFilterValues);\n    var depth = weights.length / (numFilters * filterSize * filterSize);\n    if (isFloat(depth)) {\n      throw new Error(\"depth has to be an integer: \" + depth + \", weights.length: \" + weights.length + \", numFilters: \" + numFilters + \", filterSize: \" + filterSize);\n    }\n    return tf.tidy(function () {\n      return tf.transpose(tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]);\n    });\n  }\n  function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var filters = extractFilterValues(numFilterValues, numFilters, filterSize);\n    var bias = tf.tensor1d(extractWeights(numFilters));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/filters\"\n    }, {\n      paramPath: mappedPrefix + \"/bias\"\n    });\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n  function extractScaleLayerParams(numWeights, mappedPrefix) {\n    var weights = tf.tensor1d(extractWeights(numWeights));\n    var biases = tf.tensor1d(extractWeights(numWeights));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/weights\"\n    }, {\n      paramPath: mappedPrefix + \"/biases\"\n    });\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n  function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var conv = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv\");\n    var scale = extractScaleLayerParams(numFilters, mappedPrefix + \"/scale\");\n    return {\n      conv: conv,\n      scale: scale\n    };\n  }\n  function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {\n    if (isDown === void 0) {\n      isDown = false;\n    }\n    var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv1\");\n    var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv2\");\n    return {\n      conv1: conv1,\n      conv2: conv2\n    };\n  }\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\nexport function extractParams(weights) {\n  var _a = extractWeightsFactory(weights),\n    extractWeights = _a.extractWeights,\n    getRemainingWeights = _a.getRemainingWeights;\n  var paramMappings = [];\n  var _b = extractorsFactory(extractWeights, paramMappings),\n    extractConvLayerParams = _b.extractConvLayerParams,\n    extractResidualLayerParams = _b.extractResidualLayerParams;\n  var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\n  var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\n  var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\n  var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\n  var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\n  var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\n  var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\n  var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\n  var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\n  var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\n  var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\n  var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\n  var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\n  var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\n  var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\n  var fc = tf.tidy(function () {\n    return tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]);\n  });\n  paramMappings.push({\n    paramPath: \"fc\"\n  });\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["tf","extractWeightsFactory","isFloat","extractorsFactory","extractWeights","paramMappings","extractFilterValues","numFilterValues","numFilters","filterSize","weights","depth","length","Error","tidy","transpose","tensor4d","extractConvParams","mappedPrefix","filters","bias","tensor1d","push","paramPath","extractScaleLayerParams","numWeights","biases","extractConvLayerParams","conv","scale","extractResidualLayerParams","isDown","conv1","conv2","extractParams","_a","getRemainingWeights","_b","conv32_down","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","fc","tensor2d","params"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/faceRecognitionNet/extractParams.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { extractWeightsFactory } from '../common';\r\nimport { isFloat } from '../utils';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    function extractFilterValues(numFilterValues, numFilters, filterSize) {\r\n        var weights = extractWeights(numFilterValues);\r\n        var depth = weights.length / (numFilters * filterSize * filterSize);\r\n        if (isFloat(depth)) {\r\n            throw new Error(\"depth has to be an integer: \" + depth + \", weights.length: \" + weights.length + \", numFilters: \" + numFilters + \", filterSize: \" + filterSize);\r\n        }\r\n        return tf.tidy(function () { return tf.transpose(tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]); });\r\n    }\r\n    function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\r\n        var filters = extractFilterValues(numFilterValues, numFilters, filterSize);\r\n        var bias = tf.tensor1d(extractWeights(numFilters));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/filters\" }, { paramPath: mappedPrefix + \"/bias\" });\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractScaleLayerParams(numWeights, mappedPrefix) {\r\n        var weights = tf.tensor1d(extractWeights(numWeights));\r\n        var biases = tf.tensor1d(extractWeights(numWeights));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/weights\" }, { paramPath: mappedPrefix + \"/biases\" });\r\n        return {\r\n            weights: weights,\r\n            biases: biases\r\n        };\r\n    }\r\n    function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\r\n        var conv = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv\");\r\n        var scale = extractScaleLayerParams(numFilters, mappedPrefix + \"/scale\");\r\n        return { conv: conv, scale: scale };\r\n    }\r\n    function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {\r\n        if (isDown === void 0) { isDown = false; }\r\n        var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv1\");\r\n        var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv2\");\r\n        return { conv1: conv1, conv2: conv2 };\r\n    }\r\n    return {\r\n        extractConvLayerParams: extractConvLayerParams,\r\n        extractResidualLayerParams: extractResidualLayerParams\r\n    };\r\n}\r\nexport function extractParams(weights) {\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var paramMappings = [];\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractConvLayerParams = _b.extractConvLayerParams, extractResidualLayerParams = _b.extractResidualLayerParams;\r\n    var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\r\n    var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\r\n    var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\r\n    var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\r\n    var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\r\n    var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\r\n    var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\r\n    var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\r\n    var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\r\n    var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\r\n    var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\r\n    var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\r\n    var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\r\n    var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\r\n    var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\r\n    var fc = tf.tidy(function () { return tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]); });\r\n    paramMappings.push({ paramPath: \"fc\" });\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    var params = {\r\n        conv32_down: conv32_down,\r\n        conv32_1: conv32_1,\r\n        conv32_2: conv32_2,\r\n        conv32_3: conv32_3,\r\n        conv64_down: conv64_down,\r\n        conv64_1: conv64_1,\r\n        conv64_2: conv64_2,\r\n        conv64_3: conv64_3,\r\n        conv128_down: conv128_down,\r\n        conv128_1: conv128_1,\r\n        conv128_2: conv128_2,\r\n        conv256_down: conv256_down,\r\n        conv256_1: conv256_1,\r\n        conv256_2: conv256_2,\r\n        conv256_down_out: conv256_down_out,\r\n        fc: fc\r\n    };\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}