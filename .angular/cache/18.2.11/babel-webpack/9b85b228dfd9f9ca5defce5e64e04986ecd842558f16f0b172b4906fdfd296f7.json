{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { SeparableConvParams } from './types';\nexport function extractSeparableConvParamsFactory(extractWeights, paramMappings) {\n  return function (channelsIn, channelsOut, mappedPrefix) {\n    var depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\n    var pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\n    var bias = tf.tensor1d(extractWeights(channelsOut));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/depthwise_filter\"\n    }, {\n      paramPath: mappedPrefix + \"/pointwise_filter\"\n    }, {\n      paramPath: mappedPrefix + \"/bias\"\n    });\n    return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\n  };\n}\nexport function loadSeparableConvParamsFactory(extractWeightEntry) {\n  return function (prefix) {\n    var depthwise_filter = extractWeightEntry(prefix + \"/depthwise_filter\", 4);\n    var pointwise_filter = extractWeightEntry(prefix + \"/pointwise_filter\", 4);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\n  };\n}","map":{"version":3,"names":["tf","SeparableConvParams","extractSeparableConvParamsFactory","extractWeights","paramMappings","channelsIn","channelsOut","mappedPrefix","depthwise_filter","tensor4d","pointwise_filter","bias","tensor1d","push","paramPath","loadSeparableConvParamsFactory","extractWeightEntry","prefix"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/common/extractSeparableConvParamsFactory.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { SeparableConvParams } from './types';\r\nexport function extractSeparableConvParamsFactory(extractWeights, paramMappings) {\r\n    return function (channelsIn, channelsOut, mappedPrefix) {\r\n        var depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\r\n        var pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\r\n        var bias = tf.tensor1d(extractWeights(channelsOut));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/depthwise_filter\" }, { paramPath: mappedPrefix + \"/pointwise_filter\" }, { paramPath: mappedPrefix + \"/bias\" });\r\n        return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\r\n    };\r\n}\r\nexport function loadSeparableConvParamsFactory(extractWeightEntry) {\r\n    return function (prefix) {\r\n        var depthwise_filter = extractWeightEntry(prefix + \"/depthwise_filter\", 4);\r\n        var pointwise_filter = extractWeightEntry(prefix + \"/pointwise_filter\", 4);\r\n        var bias = extractWeightEntry(prefix + \"/bias\", 1);\r\n        return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\r\n    };\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,SAASC,mBAAmB,QAAQ,SAAS;AAC7C,OAAO,SAASC,iCAAiCA,CAACC,cAAc,EAAEC,aAAa,EAAE;EAC7E,OAAO,UAAUC,UAAU,EAAEC,WAAW,EAAEC,YAAY,EAAE;IACpD,IAAIC,gBAAgB,GAAGR,EAAE,CAACS,QAAQ,CAACN,cAAc,CAAC,CAAC,GAAG,CAAC,GAAGE,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEA,UAAU,EAAE,CAAC,CAAC,CAAC;IAC7F,IAAIK,gBAAgB,GAAGV,EAAE,CAACS,QAAQ,CAACN,cAAc,CAACE,UAAU,GAAGC,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAED,UAAU,EAAEC,WAAW,CAAC,CAAC;IAC7G,IAAIK,IAAI,GAAGX,EAAE,CAACY,QAAQ,CAACT,cAAc,CAACG,WAAW,CAAC,CAAC;IACnDF,aAAa,CAACS,IAAI,CAAC;MAAEC,SAAS,EAAEP,YAAY,GAAG;IAAoB,CAAC,EAAE;MAAEO,SAAS,EAAEP,YAAY,GAAG;IAAoB,CAAC,EAAE;MAAEO,SAAS,EAAEP,YAAY,GAAG;IAAQ,CAAC,CAAC;IAC/J,OAAO,IAAIN,mBAAmB,CAACO,gBAAgB,EAAEE,gBAAgB,EAAEC,IAAI,CAAC;EAC5E,CAAC;AACL;AACA,OAAO,SAASI,8BAA8BA,CAACC,kBAAkB,EAAE;EAC/D,OAAO,UAAUC,MAAM,EAAE;IACrB,IAAIT,gBAAgB,GAAGQ,kBAAkB,CAACC,MAAM,GAAG,mBAAmB,EAAE,CAAC,CAAC;IAC1E,IAAIP,gBAAgB,GAAGM,kBAAkB,CAACC,MAAM,GAAG,mBAAmB,EAAE,CAAC,CAAC;IAC1E,IAAIN,IAAI,GAAGK,kBAAkB,CAACC,MAAM,GAAG,OAAO,EAAE,CAAC,CAAC;IAClD,OAAO,IAAIhB,mBAAmB,CAACO,gBAAgB,EAAEE,gBAAgB,EAAEC,IAAI,CAAC;EAC5E,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}