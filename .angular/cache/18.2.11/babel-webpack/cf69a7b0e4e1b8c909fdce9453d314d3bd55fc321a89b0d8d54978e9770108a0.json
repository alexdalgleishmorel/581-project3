{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isTensor3D, isTensor4D } from '../utils';\nimport { awaitMediaLoaded } from './awaitMediaLoaded';\nimport { isMediaElement } from './isMediaElement';\nimport { NetInput } from './NetInput';\nimport { resolveInput } from './resolveInput';\n/**\r\n * Validates the input to make sure, they are valid net inputs and awaits all media elements\r\n * to be finished loading.\r\n *\r\n * @param input The input, which can be a media element or an array of different media elements.\r\n * @returns A NetInput instance, which can be passed into one of the neural networks.\r\n */\nexport function toNetInput(inputs) {\n  return __awaiter(this, void 0, void 0, function () {\n    var inputArgArray, getIdxHint, inputArray;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (inputs instanceof NetInput) {\n            return [2 /*return*/, inputs];\n          }\n          inputArgArray = Array.isArray(inputs) ? inputs : [inputs];\n          if (!inputArgArray.length) {\n            throw new Error('toNetInput - empty array passed as input');\n          }\n          getIdxHint = function (idx) {\n            return Array.isArray(inputs) ? \" at input index \" + idx + \":\" : '';\n          };\n          inputArray = inputArgArray.map(resolveInput);\n          inputArray.forEach(function (input, i) {\n            if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {\n              if (typeof inputArgArray[i] === 'string') {\n                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" string passed, but could not resolve HTMLElement for element id \" + inputArgArray[i]);\n              }\n              throw new Error(\"toNetInput -\" + getIdxHint(i) + \" expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id\");\n            }\n            if (isTensor4D(input)) {\n              // if tf.Tensor4D is passed in the input array, the batch size has to be 1\n              var batchSize = input.shape[0];\n              if (batchSize !== 1) {\n                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\n              }\n            }\n          });\n          // wait for all media elements being loaded\n          return [4 /*yield*/, Promise.all(inputArray.map(function (input) {\n            return isMediaElement(input) && awaitMediaLoaded(input);\n          }))];\n        case 1:\n          // wait for all media elements being loaded\n          _a.sent();\n          return [2 /*return*/, new NetInput(inputArray, Array.isArray(inputs))];\n      }\n    });\n  });\n}","map":{"version":3,"names":["__awaiter","__generator","isTensor3D","isTensor4D","awaitMediaLoaded","isMediaElement","NetInput","resolveInput","toNetInput","inputs","inputArgArray","getIdxHint","inputArray","_a","label","Array","isArray","length","Error","idx","map","forEach","input","i","batchSize","shape","Promise","all","sent"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/dom/toNetInput.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport { isTensor3D, isTensor4D } from '../utils';\r\nimport { awaitMediaLoaded } from './awaitMediaLoaded';\r\nimport { isMediaElement } from './isMediaElement';\r\nimport { NetInput } from './NetInput';\r\nimport { resolveInput } from './resolveInput';\r\n/**\r\n * Validates the input to make sure, they are valid net inputs and awaits all media elements\r\n * to be finished loading.\r\n *\r\n * @param input The input, which can be a media element or an array of different media elements.\r\n * @returns A NetInput instance, which can be passed into one of the neural networks.\r\n */\r\nexport function toNetInput(inputs) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var inputArgArray, getIdxHint, inputArray;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (inputs instanceof NetInput) {\r\n                        return [2 /*return*/, inputs];\r\n                    }\r\n                    inputArgArray = Array.isArray(inputs)\r\n                        ? inputs\r\n                        : [inputs];\r\n                    if (!inputArgArray.length) {\r\n                        throw new Error('toNetInput - empty array passed as input');\r\n                    }\r\n                    getIdxHint = function (idx) { return Array.isArray(inputs) ? \" at input index \" + idx + \":\" : ''; };\r\n                    inputArray = inputArgArray.map(resolveInput);\r\n                    inputArray.forEach(function (input, i) {\r\n                        if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {\r\n                            if (typeof inputArgArray[i] === 'string') {\r\n                                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" string passed, but could not resolve HTMLElement for element id \" + inputArgArray[i]);\r\n                            }\r\n                            throw new Error(\"toNetInput -\" + getIdxHint(i) + \" expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id\");\r\n                        }\r\n                        if (isTensor4D(input)) {\r\n                            // if tf.Tensor4D is passed in the input array, the batch size has to be 1\r\n                            var batchSize = input.shape[0];\r\n                            if (batchSize !== 1) {\r\n                                throw new Error(\"toNetInput -\" + getIdxHint(i) + \" tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\r\n                            }\r\n                        }\r\n                    });\r\n                    // wait for all media elements being loaded\r\n                    return [4 /*yield*/, Promise.all(inputArray.map(function (input) { return isMediaElement(input) && awaitMediaLoaded(input); }))];\r\n                case 1:\r\n                    // wait for all media elements being loaded\r\n                    _a.sent();\r\n                    return [2 /*return*/, new NetInput(inputArray, Array.isArray(inputs))];\r\n            }\r\n        });\r\n    });\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,UAAU,EAAEC,UAAU,QAAQ,UAAU;AACjD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAE;EAC/B,OAAOT,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;IAC/C,IAAIU,aAAa,EAAEC,UAAU,EAAEC,UAAU;IACzC,OAAOX,WAAW,CAAC,IAAI,EAAE,UAAUY,EAAE,EAAE;MACnC,QAAQA,EAAE,CAACC,KAAK;QACZ,KAAK,CAAC;UACF,IAAIL,MAAM,YAAYH,QAAQ,EAAE;YAC5B,OAAO,CAAC,CAAC,CAAC,YAAYG,MAAM,CAAC;UACjC;UACAC,aAAa,GAAGK,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GAC/BA,MAAM,GACN,CAACA,MAAM,CAAC;UACd,IAAI,CAACC,aAAa,CAACO,MAAM,EAAE;YACvB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;UAC/D;UACAP,UAAU,GAAG,SAAAA,CAAUQ,GAAG,EAAE;YAAE,OAAOJ,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GAAG,kBAAkB,GAAGU,GAAG,GAAG,GAAG,GAAG,EAAE;UAAE,CAAC;UACnGP,UAAU,GAAGF,aAAa,CAACU,GAAG,CAACb,YAAY,CAAC;UAC5CK,UAAU,CAACS,OAAO,CAAC,UAAUC,KAAK,EAAEC,CAAC,EAAE;YACnC,IAAI,CAAClB,cAAc,CAACiB,KAAK,CAAC,IAAI,CAACpB,UAAU,CAACoB,KAAK,CAAC,IAAI,CAACnB,UAAU,CAACmB,KAAK,CAAC,EAAE;cACpE,IAAI,OAAOZ,aAAa,CAACa,CAAC,CAAC,KAAK,QAAQ,EAAE;gBACtC,MAAM,IAAIL,KAAK,CAAC,cAAc,GAAGP,UAAU,CAACY,CAAC,CAAC,GAAG,mEAAmE,GAAGb,aAAa,CAACa,CAAC,CAAC,CAAC;cAC5I;cACA,MAAM,IAAIL,KAAK,CAAC,cAAc,GAAGP,UAAU,CAACY,CAAC,CAAC,GAAG,6HAA6H,CAAC;YACnL;YACA,IAAIpB,UAAU,CAACmB,KAAK,CAAC,EAAE;cACnB;cACA,IAAIE,SAAS,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC;cAC9B,IAAID,SAAS,KAAK,CAAC,EAAE;gBACjB,MAAM,IAAIN,KAAK,CAAC,cAAc,GAAGP,UAAU,CAACY,CAAC,CAAC,GAAG,8BAA8B,GAAGC,SAAS,GAAG,2CAA2C,CAAC;cAC9I;YACJ;UACJ,CAAC,CAAC;UACF;UACA,OAAO,CAAC,CAAC,CAAC,WAAWE,OAAO,CAACC,GAAG,CAACf,UAAU,CAACQ,GAAG,CAAC,UAAUE,KAAK,EAAE;YAAE,OAAOjB,cAAc,CAACiB,KAAK,CAAC,IAAIlB,gBAAgB,CAACkB,KAAK,CAAC;UAAE,CAAC,CAAC,CAAC,CAAC;QACpI,KAAK,CAAC;UACF;UACAT,EAAE,CAACe,IAAI,CAAC,CAAC;UACT,OAAO,CAAC,CAAC,CAAC,YAAY,IAAItB,QAAQ,CAACM,UAAU,EAAEG,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,CAAC,CAAC;MAC9E;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}