{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox, Point } from '../classes';\nimport { nonMaxSuppression } from '../ops';\nimport { CELL_SIZE, CELL_STRIDE } from './config';\nimport { getSizesForScale } from './getSizesForScale';\nimport { MtcnnBox } from './MtcnnBox';\nimport { normalize } from './normalize';\nimport { PNet } from './PNet';\nfunction rescaleAndNormalize(x, scale) {\n  return tf.tidy(function () {\n    var _a = getSizesForScale(scale, x.shape.slice(1)),\n      height = _a.height,\n      width = _a.width;\n    var resized = tf.image.resizeBilinear(x, [height, width]);\n    var normalized = normalize(resized);\n    return tf.transpose(normalized, [0, 2, 1, 3]);\n  });\n}\nfunction extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold) {\n  // TODO: fix this!, maybe better to use tf.gather here\n  var indices = [];\n  var scoresData = scoresTensor.arraySync();\n  for (var y = 0; y < scoresTensor.shape[0]; y++) {\n    for (var x = 0; x < scoresTensor.shape[1]; x++) {\n      if (scoresData[y][x] >= scoreThreshold) {\n        indices.push(new Point(x, y));\n      }\n    }\n  }\n  var boundingBoxes = indices.map(function (idx) {\n    var cell = new BoundingBox(Math.round((idx.y * CELL_STRIDE + 1) / scale), Math.round((idx.x * CELL_STRIDE + 1) / scale), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale));\n    var score = scoresData[idx.y][idx.x];\n    var regionsData = regionsTensor.arraySync();\n    var region = new MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);\n    return {\n      cell: cell,\n      score: score,\n      region: region\n    };\n  });\n  return boundingBoxes;\n}\nexport function stage1(imgTensor, scales, scoreThreshold, params, stats) {\n  stats.stage1 = [];\n  var pnetOutputs = scales.map(function (scale) {\n    return tf.tidy(function () {\n      var statsForScale = {\n        scale: scale\n      };\n      var resized = rescaleAndNormalize(imgTensor, scale);\n      var ts = Date.now();\n      var _a = PNet(resized, params),\n        prob = _a.prob,\n        regions = _a.regions;\n      statsForScale.pnet = Date.now() - ts;\n      var scoresTensor = tf.unstack(tf.unstack(prob, 3)[1])[0];\n      var regionsTensor = tf.unstack(regions)[0];\n      return {\n        scoresTensor: scoresTensor,\n        regionsTensor: regionsTensor,\n        scale: scale,\n        statsForScale: statsForScale\n      };\n    });\n  });\n  var boxesForScale = pnetOutputs.map(function (_a) {\n    var scoresTensor = _a.scoresTensor,\n      regionsTensor = _a.regionsTensor,\n      scale = _a.scale,\n      statsForScale = _a.statsForScale;\n    var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold);\n    scoresTensor.dispose();\n    regionsTensor.dispose();\n    if (!boundingBoxes.length) {\n      stats.stage1.push(statsForScale);\n      return [];\n    }\n    var ts = Date.now();\n    var indices = nonMaxSuppression(boundingBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), boundingBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.5);\n    statsForScale.nms = Date.now() - ts;\n    statsForScale.numBoxes = indices.length;\n    stats.stage1.push(statsForScale);\n    return indices.map(function (boxIdx) {\n      return boundingBoxes[boxIdx];\n    });\n  });\n  var allBoxes = boxesForScale.reduce(function (all, boxes) {\n    return all.concat(boxes);\n  }, []);\n  var finalBoxes = [];\n  var finalScores = [];\n  if (allBoxes.length > 0) {\n    var ts = Date.now();\n    var indices = nonMaxSuppression(allBoxes.map(function (bbox) {\n      return bbox.cell;\n    }), allBoxes.map(function (bbox) {\n      return bbox.score;\n    }), 0.7);\n    stats.stage1_nms = Date.now() - ts;\n    finalScores = indices.map(function (idx) {\n      return allBoxes[idx].score;\n    });\n    finalBoxes = indices.map(function (idx) {\n      return allBoxes[idx];\n    }).map(function (_a) {\n      var cell = _a.cell,\n        region = _a.region;\n      return new BoundingBox(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();\n    });\n  }\n  return {\n    boxes: finalBoxes,\n    scores: finalScores\n  };\n}","map":{"version":3,"names":["tf","BoundingBox","Point","nonMaxSuppression","CELL_SIZE","CELL_STRIDE","getSizesForScale","MtcnnBox","normalize","PNet","rescaleAndNormalize","x","scale","tidy","_a","shape","slice","height","width","resized","image","resizeBilinear","normalized","transpose","extractBoundingBoxes","scoresTensor","regionsTensor","scoreThreshold","indices","scoresData","arraySync","y","push","boundingBoxes","map","idx","cell","Math","round","score","regionsData","region","stage1","imgTensor","scales","params","stats","pnetOutputs","statsForScale","ts","Date","now","prob","regions","pnet","unstack","boxesForScale","dispose","length","bbox","nms","numBoxes","boxIdx","allBoxes","reduce","all","boxes","concat","finalBoxes","finalScores","stage1_nms","left","top","right","bottom","toSquare","scores"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/mtcnn/stage1.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { BoundingBox, Point } from '../classes';\r\nimport { nonMaxSuppression } from '../ops';\r\nimport { CELL_SIZE, CELL_STRIDE } from './config';\r\nimport { getSizesForScale } from './getSizesForScale';\r\nimport { MtcnnBox } from './MtcnnBox';\r\nimport { normalize } from './normalize';\r\nimport { PNet } from './PNet';\r\nfunction rescaleAndNormalize(x, scale) {\r\n    return tf.tidy(function () {\r\n        var _a = getSizesForScale(scale, x.shape.slice(1)), height = _a.height, width = _a.width;\r\n        var resized = tf.image.resizeBilinear(x, [height, width]);\r\n        var normalized = normalize(resized);\r\n        return tf.transpose(normalized, [0, 2, 1, 3]);\r\n    });\r\n}\r\nfunction extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold) {\r\n    // TODO: fix this!, maybe better to use tf.gather here\r\n    var indices = [];\r\n    var scoresData = scoresTensor.arraySync();\r\n    for (var y = 0; y < scoresTensor.shape[0]; y++) {\r\n        for (var x = 0; x < scoresTensor.shape[1]; x++) {\r\n            if (scoresData[y][x] >= scoreThreshold) {\r\n                indices.push(new Point(x, y));\r\n            }\r\n        }\r\n    }\r\n    var boundingBoxes = indices.map(function (idx) {\r\n        var cell = new BoundingBox(Math.round((idx.y * CELL_STRIDE + 1) / scale), Math.round((idx.x * CELL_STRIDE + 1) / scale), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale));\r\n        var score = scoresData[idx.y][idx.x];\r\n        var regionsData = regionsTensor.arraySync();\r\n        var region = new MtcnnBox(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);\r\n        return {\r\n            cell: cell,\r\n            score: score,\r\n            region: region\r\n        };\r\n    });\r\n    return boundingBoxes;\r\n}\r\nexport function stage1(imgTensor, scales, scoreThreshold, params, stats) {\r\n    stats.stage1 = [];\r\n    var pnetOutputs = scales.map(function (scale) { return tf.tidy(function () {\r\n        var statsForScale = { scale: scale };\r\n        var resized = rescaleAndNormalize(imgTensor, scale);\r\n        var ts = Date.now();\r\n        var _a = PNet(resized, params), prob = _a.prob, regions = _a.regions;\r\n        statsForScale.pnet = Date.now() - ts;\r\n        var scoresTensor = tf.unstack(tf.unstack(prob, 3)[1])[0];\r\n        var regionsTensor = tf.unstack(regions)[0];\r\n        return {\r\n            scoresTensor: scoresTensor,\r\n            regionsTensor: regionsTensor,\r\n            scale: scale,\r\n            statsForScale: statsForScale\r\n        };\r\n    }); });\r\n    var boxesForScale = pnetOutputs.map(function (_a) {\r\n        var scoresTensor = _a.scoresTensor, regionsTensor = _a.regionsTensor, scale = _a.scale, statsForScale = _a.statsForScale;\r\n        var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale, scoreThreshold);\r\n        scoresTensor.dispose();\r\n        regionsTensor.dispose();\r\n        if (!boundingBoxes.length) {\r\n            stats.stage1.push(statsForScale);\r\n            return [];\r\n        }\r\n        var ts = Date.now();\r\n        var indices = nonMaxSuppression(boundingBoxes.map(function (bbox) { return bbox.cell; }), boundingBoxes.map(function (bbox) { return bbox.score; }), 0.5);\r\n        statsForScale.nms = Date.now() - ts;\r\n        statsForScale.numBoxes = indices.length;\r\n        stats.stage1.push(statsForScale);\r\n        return indices.map(function (boxIdx) { return boundingBoxes[boxIdx]; });\r\n    });\r\n    var allBoxes = boxesForScale.reduce(function (all, boxes) { return all.concat(boxes); }, []);\r\n    var finalBoxes = [];\r\n    var finalScores = [];\r\n    if (allBoxes.length > 0) {\r\n        var ts = Date.now();\r\n        var indices = nonMaxSuppression(allBoxes.map(function (bbox) { return bbox.cell; }), allBoxes.map(function (bbox) { return bbox.score; }), 0.7);\r\n        stats.stage1_nms = Date.now() - ts;\r\n        finalScores = indices.map(function (idx) { return allBoxes[idx].score; });\r\n        finalBoxes = indices\r\n            .map(function (idx) { return allBoxes[idx]; })\r\n            .map(function (_a) {\r\n            var cell = _a.cell, region = _a.region;\r\n            return new BoundingBox(cell.left + (region.left * cell.width), cell.top + (region.top * cell.height), cell.right + (region.right * cell.width), cell.bottom + (region.bottom * cell.height)).toSquare().round();\r\n        });\r\n    }\r\n    return {\r\n        boxes: finalBoxes,\r\n        scores: finalScores\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}