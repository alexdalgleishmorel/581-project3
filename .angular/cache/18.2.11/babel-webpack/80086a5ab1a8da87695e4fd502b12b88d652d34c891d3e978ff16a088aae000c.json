{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n  function extractConvParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n  function extractFCParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/weights\", 2);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      weights: weights,\n      bias: bias\n    };\n  }\n  function extractPReluParams(paramPath) {\n    return extractWeightEntry(paramPath, 1);\n  }\n  function extractSharedParams(prefix) {\n    var conv1 = extractConvParams(prefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(prefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(prefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams('pnet');\n    var conv4_1 = extractConvParams('pnet/conv4_1');\n    var conv4_2 = extractConvParams('pnet/conv4_2');\n    return __assign(__assign({}, sharedParams), {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams('rnet');\n    var fc1 = extractFCParams('rnet/fc1');\n    var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams('rnet/fc2_1');\n    var fc2_2 = extractFCParams('rnet/fc2_2');\n    return __assign(__assign({}, sharedParams), {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n  function extractONetParams() {\n    var sharedParams = extractSharedParams('onet');\n    var conv4 = extractConvParams('onet/conv4');\n    var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\n    var fc1 = extractFCParams('onet/fc1');\n    var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\n    var fc2_1 = extractFCParams('onet/fc2_1');\n    var fc2_2 = extractFCParams('onet/fc2_2');\n    var fc2_3 = extractFCParams('onet/fc2_3');\n    return __assign(__assign({}, sharedParams), {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n  var _a = extractorsFactory(weightMap, paramMappings),\n    extractPNetParams = _a.extractPNetParams,\n    extractRNetParams = _a.extractRNetParams,\n    extractONetParams = _a.extractONetParams;\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"names":["__assign","disposeUnusedWeightTensors","extractWeightEntryFactory","extractorsFactory","weightMap","paramMappings","extractWeightEntry","extractConvParams","prefix","filters","bias","extractFCParams","weights","extractPReluParams","paramPath","extractSharedParams","conv1","prelu1_alpha","conv2","prelu2_alpha","conv3","prelu3_alpha","extractPNetParams","sharedParams","conv4_1","conv4_2","extractRNetParams","fc1","prelu4_alpha","fc2_1","fc2_2","extractONetParams","conv4","prelu5_alpha","fc2_3","extractParamsFromWeigthMap","_a","pnet","rnet","onet","params"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/mtcnn/extractParamsFromWeigthMap.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\r\nfunction extractorsFactory(weightMap, paramMappings) {\r\n    var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\r\n    function extractConvParams(prefix) {\r\n        var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\r\n        var bias = extractWeightEntry(prefix + \"/bias\", 1);\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractFCParams(prefix) {\r\n        var weights = extractWeightEntry(prefix + \"/weights\", 2);\r\n        var bias = extractWeightEntry(prefix + \"/bias\", 1);\r\n        return { weights: weights, bias: bias };\r\n    }\r\n    function extractPReluParams(paramPath) {\r\n        return extractWeightEntry(paramPath, 1);\r\n    }\r\n    function extractSharedParams(prefix) {\r\n        var conv1 = extractConvParams(prefix + \"/conv1\");\r\n        var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\r\n        var conv2 = extractConvParams(prefix + \"/conv2\");\r\n        var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\r\n        var conv3 = extractConvParams(prefix + \"/conv3\");\r\n        var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\r\n        return { conv1: conv1, prelu1_alpha: prelu1_alpha, conv2: conv2, prelu2_alpha: prelu2_alpha, conv3: conv3, prelu3_alpha: prelu3_alpha };\r\n    }\r\n    function extractPNetParams() {\r\n        var sharedParams = extractSharedParams('pnet');\r\n        var conv4_1 = extractConvParams('pnet/conv4_1');\r\n        var conv4_2 = extractConvParams('pnet/conv4_2');\r\n        return __assign(__assign({}, sharedParams), { conv4_1: conv4_1, conv4_2: conv4_2 });\r\n    }\r\n    function extractRNetParams() {\r\n        var sharedParams = extractSharedParams('rnet');\r\n        var fc1 = extractFCParams('rnet/fc1');\r\n        var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\r\n        var fc2_1 = extractFCParams('rnet/fc2_1');\r\n        var fc2_2 = extractFCParams('rnet/fc2_2');\r\n        return __assign(__assign({}, sharedParams), { fc1: fc1, prelu4_alpha: prelu4_alpha, fc2_1: fc2_1, fc2_2: fc2_2 });\r\n    }\r\n    function extractONetParams() {\r\n        var sharedParams = extractSharedParams('onet');\r\n        var conv4 = extractConvParams('onet/conv4');\r\n        var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\r\n        var fc1 = extractFCParams('onet/fc1');\r\n        var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\r\n        var fc2_1 = extractFCParams('onet/fc2_1');\r\n        var fc2_2 = extractFCParams('onet/fc2_2');\r\n        var fc2_3 = extractFCParams('onet/fc2_3');\r\n        return __assign(__assign({}, sharedParams), { conv4: conv4, prelu4_alpha: prelu4_alpha, fc1: fc1, prelu5_alpha: prelu5_alpha, fc2_1: fc2_1, fc2_2: fc2_2, fc2_3: fc2_3 });\r\n    }\r\n    return {\r\n        extractPNetParams: extractPNetParams,\r\n        extractRNetParams: extractRNetParams,\r\n        extractONetParams: extractONetParams\r\n    };\r\n}\r\nexport function extractParamsFromWeigthMap(weightMap) {\r\n    var paramMappings = [];\r\n    var _a = extractorsFactory(weightMap, paramMappings), extractPNetParams = _a.extractPNetParams, extractRNetParams = _a.extractRNetParams, extractONetParams = _a.extractONetParams;\r\n    var pnet = extractPNetParams();\r\n    var rnet = extractRNetParams();\r\n    var onet = extractONetParams();\r\n    disposeUnusedWeightTensors(weightMap, paramMappings);\r\n    return { params: { pnet: pnet, rnet: rnet, onet: onet }, paramMappings: paramMappings };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}