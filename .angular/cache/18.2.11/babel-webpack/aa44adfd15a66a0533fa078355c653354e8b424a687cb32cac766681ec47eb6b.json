{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { env } from '../env';\nimport { padToSquare } from '../ops/padToSquare';\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils';\nimport { createCanvasFromMedia } from './createCanvas';\nimport { imageToSquare } from './imageToSquare';\nvar NetInput = /** @class */function () {\n  function NetInput(inputs, treatAsBatchInput) {\n    var _this = this;\n    if (treatAsBatchInput === void 0) {\n      treatAsBatchInput = false;\n    }\n    this._imageTensors = [];\n    this._canvases = [];\n    this._treatAsBatchInput = false;\n    this._inputDimensions = [];\n    if (!Array.isArray(inputs)) {\n      throw new Error(\"NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have \" + inputs);\n    }\n    this._treatAsBatchInput = treatAsBatchInput;\n    this._batchSize = inputs.length;\n    inputs.forEach(function (input, idx) {\n      if (isTensor3D(input)) {\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape;\n        return;\n      }\n      if (isTensor4D(input)) {\n        var batchSize = input.shape[0];\n        if (batchSize !== 1) {\n          throw new Error(\"NetInput - tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\n        }\n        _this._imageTensors[idx] = input;\n        _this._inputDimensions[idx] = input.shape.slice(1);\n        return;\n      }\n      var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);\n      _this._canvases[idx] = canvas;\n      _this._inputDimensions[idx] = [canvas.height, canvas.width, 3];\n    });\n  }\n  Object.defineProperty(NetInput.prototype, \"imageTensors\", {\n    get: function () {\n      return this._imageTensors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"canvases\", {\n    get: function () {\n      return this._canvases;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"isBatchInput\", {\n    get: function () {\n      return this.batchSize > 1 || this._treatAsBatchInput;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"batchSize\", {\n    get: function () {\n      return this._batchSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputDimensions\", {\n    get: function () {\n      return this._inputDimensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"inputSize\", {\n    get: function () {\n      return this._inputSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NetInput.prototype, \"reshapedInputDimensions\", {\n    get: function () {\n      var _this = this;\n      return range(this.batchSize, 0, 1).map(function (_, batchIdx) {\n        return _this.getReshapedInputDimensions(batchIdx);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  NetInput.prototype.getInput = function (batchIdx) {\n    return this.canvases[batchIdx] || this.imageTensors[batchIdx];\n  };\n  NetInput.prototype.getInputDimensions = function (batchIdx) {\n    return this._inputDimensions[batchIdx];\n  };\n  NetInput.prototype.getInputHeight = function (batchIdx) {\n    return this._inputDimensions[batchIdx][0];\n  };\n  NetInput.prototype.getInputWidth = function (batchIdx) {\n    return this._inputDimensions[batchIdx][1];\n  };\n  NetInput.prototype.getReshapedInputDimensions = function (batchIdx) {\n    if (typeof this.inputSize !== 'number') {\n      throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');\n    }\n    var width = this.getInputWidth(batchIdx);\n    var height = this.getInputHeight(batchIdx);\n    return computeReshapedDimensions({\n      width: width,\n      height: height\n    }, this.inputSize);\n  };\n  /**\r\n   * Create a batch tensor from all input canvases and tensors\r\n   * with size [batchSize, inputSize, inputSize, 3].\r\n   *\r\n   * @param inputSize Height and width of the tensor.\r\n   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\r\n   * both sides of the minor dimension oof the image.\r\n   * @returns The batch tensor.\r\n   */\n  NetInput.prototype.toBatchTensor = function (inputSize, isCenterInputs) {\n    var _this = this;\n    if (isCenterInputs === void 0) {\n      isCenterInputs = true;\n    }\n    this._inputSize = inputSize;\n    return tf.tidy(function () {\n      var inputTensors = range(_this.batchSize, 0, 1).map(function (batchIdx) {\n        var input = _this.getInput(batchIdx);\n        if (input instanceof tf.Tensor) {\n          var imgTensor = isTensor4D(input) ? input : input.expandDims();\n          imgTensor = padToSquare(imgTensor, isCenterInputs);\n          if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\n            imgTensor = tf.image.resizeBilinear(imgTensor, [inputSize, inputSize]);\n          }\n          return imgTensor.as3D(inputSize, inputSize, 3);\n        }\n        if (input instanceof env.getEnv().Canvas) {\n          return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs));\n        }\n        throw new Error(\"toBatchTensor - at batchIdx \" + batchIdx + \", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have \" + input);\n      });\n      var batchTensor = tf.stack(inputTensors.map(function (t) {\n        return t.toFloat();\n      })).as4D(_this.batchSize, inputSize, inputSize, 3);\n      return batchTensor;\n    });\n  };\n  return NetInput;\n}();\nexport { NetInput };","map":{"version":3,"names":["tf","env","padToSquare","computeReshapedDimensions","isTensor3D","isTensor4D","range","createCanvasFromMedia","imageToSquare","NetInput","inputs","treatAsBatchInput","_this","_imageTensors","_canvases","_treatAsBatchInput","_inputDimensions","Array","isArray","Error","_batchSize","length","forEach","input","idx","shape","batchSize","slice","canvas","getEnv","Canvas","height","width","Object","defineProperty","prototype","get","enumerable","configurable","_inputSize","map","_","batchIdx","getReshapedInputDimensions","getInput","canvases","imageTensors","getInputDimensions","getInputHeight","getInputWidth","inputSize","toBatchTensor","isCenterInputs","tidy","inputTensors","Tensor","imgTensor","expandDims","image","resizeBilinear","as3D","browser","fromPixels","batchTensor","stack","t","toFloat","as4D"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/dom/NetInput.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { env } from '../env';\r\nimport { padToSquare } from '../ops/padToSquare';\r\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils';\r\nimport { createCanvasFromMedia } from './createCanvas';\r\nimport { imageToSquare } from './imageToSquare';\r\nvar NetInput = /** @class */ (function () {\r\n    function NetInput(inputs, treatAsBatchInput) {\r\n        var _this = this;\r\n        if (treatAsBatchInput === void 0) { treatAsBatchInput = false; }\r\n        this._imageTensors = [];\r\n        this._canvases = [];\r\n        this._treatAsBatchInput = false;\r\n        this._inputDimensions = [];\r\n        if (!Array.isArray(inputs)) {\r\n            throw new Error(\"NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have \" + inputs);\r\n        }\r\n        this._treatAsBatchInput = treatAsBatchInput;\r\n        this._batchSize = inputs.length;\r\n        inputs.forEach(function (input, idx) {\r\n            if (isTensor3D(input)) {\r\n                _this._imageTensors[idx] = input;\r\n                _this._inputDimensions[idx] = input.shape;\r\n                return;\r\n            }\r\n            if (isTensor4D(input)) {\r\n                var batchSize = input.shape[0];\r\n                if (batchSize !== 1) {\r\n                    throw new Error(\"NetInput - tf.Tensor4D with batchSize \" + batchSize + \" passed, but not supported in input array\");\r\n                }\r\n                _this._imageTensors[idx] = input;\r\n                _this._inputDimensions[idx] = input.shape.slice(1);\r\n                return;\r\n            }\r\n            var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);\r\n            _this._canvases[idx] = canvas;\r\n            _this._inputDimensions[idx] = [canvas.height, canvas.width, 3];\r\n        });\r\n    }\r\n    Object.defineProperty(NetInput.prototype, \"imageTensors\", {\r\n        get: function () {\r\n            return this._imageTensors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"canvases\", {\r\n        get: function () {\r\n            return this._canvases;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"isBatchInput\", {\r\n        get: function () {\r\n            return this.batchSize > 1 || this._treatAsBatchInput;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"batchSize\", {\r\n        get: function () {\r\n            return this._batchSize;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"inputDimensions\", {\r\n        get: function () {\r\n            return this._inputDimensions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"inputSize\", {\r\n        get: function () {\r\n            return this._inputSize;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NetInput.prototype, \"reshapedInputDimensions\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return range(this.batchSize, 0, 1).map(function (_, batchIdx) { return _this.getReshapedInputDimensions(batchIdx); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NetInput.prototype.getInput = function (batchIdx) {\r\n        return this.canvases[batchIdx] || this.imageTensors[batchIdx];\r\n    };\r\n    NetInput.prototype.getInputDimensions = function (batchIdx) {\r\n        return this._inputDimensions[batchIdx];\r\n    };\r\n    NetInput.prototype.getInputHeight = function (batchIdx) {\r\n        return this._inputDimensions[batchIdx][0];\r\n    };\r\n    NetInput.prototype.getInputWidth = function (batchIdx) {\r\n        return this._inputDimensions[batchIdx][1];\r\n    };\r\n    NetInput.prototype.getReshapedInputDimensions = function (batchIdx) {\r\n        if (typeof this.inputSize !== 'number') {\r\n            throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');\r\n        }\r\n        var width = this.getInputWidth(batchIdx);\r\n        var height = this.getInputHeight(batchIdx);\r\n        return computeReshapedDimensions({ width: width, height: height }, this.inputSize);\r\n    };\r\n    /**\r\n     * Create a batch tensor from all input canvases and tensors\r\n     * with size [batchSize, inputSize, inputSize, 3].\r\n     *\r\n     * @param inputSize Height and width of the tensor.\r\n     * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\r\n     * both sides of the minor dimension oof the image.\r\n     * @returns The batch tensor.\r\n     */\r\n    NetInput.prototype.toBatchTensor = function (inputSize, isCenterInputs) {\r\n        var _this = this;\r\n        if (isCenterInputs === void 0) { isCenterInputs = true; }\r\n        this._inputSize = inputSize;\r\n        return tf.tidy(function () {\r\n            var inputTensors = range(_this.batchSize, 0, 1).map(function (batchIdx) {\r\n                var input = _this.getInput(batchIdx);\r\n                if (input instanceof tf.Tensor) {\r\n                    var imgTensor = isTensor4D(input) ? input : input.expandDims();\r\n                    imgTensor = padToSquare(imgTensor, isCenterInputs);\r\n                    if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\r\n                        imgTensor = tf.image.resizeBilinear(imgTensor, [inputSize, inputSize]);\r\n                    }\r\n                    return imgTensor.as3D(inputSize, inputSize, 3);\r\n                }\r\n                if (input instanceof env.getEnv().Canvas) {\r\n                    return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs));\r\n                }\r\n                throw new Error(\"toBatchTensor - at batchIdx \" + batchIdx + \", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have \" + input);\r\n            });\r\n            var batchTensor = tf.stack(inputTensors.map(function (t) { return t.toFloat(); })).as4D(_this.batchSize, inputSize, inputSize, 3);\r\n            return batchTensor;\r\n        });\r\n    };\r\n    return NetInput;\r\n}());\r\nexport { NetInput };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}