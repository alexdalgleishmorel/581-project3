{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { depthwiseSeparableConv } from '../common';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { range } from '../utils';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nfunction conv(x, params, stride) {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\nfunction reductionBlock(x, params, isActivateInput) {\n  if (isActivateInput === void 0) {\n    isActivateInput = true;\n  }\n  var out = isActivateInput ? tf.relu(x) : x;\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\nfunction mainBlock(x, params) {\n  var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\nvar TinyXception = /** @class */function (_super) {\n  __extends(TinyXception, _super);\n  function TinyXception(numMainBlocks) {\n    var _this = _super.call(this, 'TinyXception') || this;\n    _this._numMainBlocks = numMainBlocks;\n    return _this;\n  }\n  TinyXception.prototype.forwardInput = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\n        out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  };\n  TinyXception.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  TinyXception.prototype.getDefaultModelName = function () {\n    return 'tiny_xception_model';\n  };\n  TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\n  };\n  TinyXception.prototype.extractParams = function (weights) {\n    return extractParams(weights, this._numMainBlocks);\n  };\n  return TinyXception;\n}(NeuralNetwork);\nexport { TinyXception };","map":{"version":3,"names":["__awaiter","__extends","__generator","tf","depthwiseSeparableConv","toNetInput","NeuralNetwork","normalize","range","extractParams","extractParamsFromWeigthMap","conv","x","params","stride","add","conv2d","filters","bias","reductionBlock","isActivateInput","out","relu","separable_conv0","separable_conv1","maxPool","expansion_conv","mainBlock","separable_conv2","TinyXception","_super","numMainBlocks","_this","call","_numMainBlocks","prototype","forwardInput","input","Error","tidy","batchTensor","toBatchTensor","meanRgb","normalized","div","scalar","entry_flow","conv_in","reduction_block_0","reduction_block_1","forEach","idx","middle_flow","exit_flow","reduction_block","separable_conv","forward","_a","_b","label","apply","sent","getDefaultModelName","weightMap","weights"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/xception/TinyXception.js"],"sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { depthwiseSeparableConv } from '../common';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { normalize } from '../ops';\r\nimport { range } from '../utils';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nfunction conv(x, params, stride) {\r\n    return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\r\n}\r\nfunction reductionBlock(x, params, isActivateInput) {\r\n    if (isActivateInput === void 0) { isActivateInput = true; }\r\n    var out = isActivateInput ? tf.relu(x) : x;\r\n    out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\r\n    out = tf.maxPool(out, [3, 3], [2, 2], 'same');\r\n    out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\r\n    return out;\r\n}\r\nfunction mainBlock(x, params) {\r\n    var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\r\n    out = tf.add(out, x);\r\n    return out;\r\n}\r\nvar TinyXception = /** @class */ (function (_super) {\r\n    __extends(TinyXception, _super);\r\n    function TinyXception(numMainBlocks) {\r\n        var _this = _super.call(this, 'TinyXception') || this;\r\n        _this._numMainBlocks = numMainBlocks;\r\n        return _this;\r\n    }\r\n    TinyXception.prototype.forwardInput = function (input) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('TinyXception - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(112, true);\r\n            var meanRgb = [122.782, 117.001, 104.298];\r\n            var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\r\n            var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\r\n            out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\r\n            out = reductionBlock(out, params.entry_flow.reduction_block_1);\r\n            range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\r\n                out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\r\n            });\r\n            out = reductionBlock(out, params.exit_flow.reduction_block);\r\n            out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\r\n            return out;\r\n        });\r\n    };\r\n    TinyXception.prototype.forward = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyXception.prototype.getDefaultModelName = function () {\r\n        return 'tiny_xception_model';\r\n    };\r\n    TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\r\n    };\r\n    TinyXception.prototype.extractParams = function (weights) {\r\n        return extractParams(weights, this._numMainBlocks);\r\n    };\r\n    return TinyXception;\r\n}(NeuralNetwork));\r\nexport { TinyXception };\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACzD,OAAO,KAAKC,EAAE,MAAM,uBAAuB;AAC3C,SAASC,sBAAsB,QAAQ,WAAW;AAClD,SAASC,UAAU,QAAQ,QAAQ;AACnC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,0BAA0B,QAAQ,8BAA8B;AACzE,SAASC,IAAIA,CAACC,CAAC,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC7B,OAAOX,EAAE,CAACY,GAAG,CAACZ,EAAE,CAACa,MAAM,CAACJ,CAAC,EAAEC,MAAM,CAACI,OAAO,EAAEH,MAAM,EAAE,MAAM,CAAC,EAAED,MAAM,CAACK,IAAI,CAAC;AAC5E;AACA,SAASC,cAAcA,CAACP,CAAC,EAAEC,MAAM,EAAEO,eAAe,EAAE;EAChD,IAAIA,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,IAAI;EAAE;EAC1D,IAAIC,GAAG,GAAGD,eAAe,GAAGjB,EAAE,CAACmB,IAAI,CAACV,CAAC,CAAC,GAAGA,CAAC;EAC1CS,GAAG,GAAGjB,sBAAsB,CAACiB,GAAG,EAAER,MAAM,CAACU,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACjEF,GAAG,GAAGjB,sBAAsB,CAACD,EAAE,CAACmB,IAAI,CAACD,GAAG,CAAC,EAAER,MAAM,CAACW,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1EH,GAAG,GAAGlB,EAAE,CAACsB,OAAO,CAACJ,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;EAC7CA,GAAG,GAAGlB,EAAE,CAACY,GAAG,CAACM,GAAG,EAAEV,IAAI,CAACC,CAAC,EAAEC,MAAM,CAACa,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACzD,OAAOL,GAAG;AACd;AACA,SAASM,SAASA,CAACf,CAAC,EAAEC,MAAM,EAAE;EAC1B,IAAIQ,GAAG,GAAGjB,sBAAsB,CAACD,EAAE,CAACmB,IAAI,CAACV,CAAC,CAAC,EAAEC,MAAM,CAACU,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5EF,GAAG,GAAGjB,sBAAsB,CAACD,EAAE,CAACmB,IAAI,CAACD,GAAG,CAAC,EAAER,MAAM,CAACW,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1EH,GAAG,GAAGjB,sBAAsB,CAACD,EAAE,CAACmB,IAAI,CAACD,GAAG,CAAC,EAAER,MAAM,CAACe,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1EP,GAAG,GAAGlB,EAAE,CAACY,GAAG,CAACM,GAAG,EAAET,CAAC,CAAC;EACpB,OAAOS,GAAG;AACd;AACA,IAAIQ,YAAY,GAAG,aAAe,UAAUC,MAAM,EAAE;EAChD7B,SAAS,CAAC4B,YAAY,EAAEC,MAAM,CAAC;EAC/B,SAASD,YAAYA,CAACE,aAAa,EAAE;IACjC,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,IAAI;IACrDD,KAAK,CAACE,cAAc,GAAGH,aAAa;IACpC,OAAOC,KAAK;EAChB;EACAH,YAAY,CAACM,SAAS,CAACC,YAAY,GAAG,UAAUC,KAAK,EAAE;IACnD,IAAIL,KAAK,GAAG,IAAI;IAChB,IAAInB,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,IAAI,CAACA,MAAM,EAAE;MACT,MAAM,IAAIyB,KAAK,CAAC,4CAA4C,CAAC;IACjE;IACA,OAAOnC,EAAE,CAACoC,IAAI,CAAC,YAAY;MACvB,IAAIC,WAAW,GAAGH,KAAK,CAACI,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC;MAChD,IAAIC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;MACzC,IAAIC,UAAU,GAAGpC,SAAS,CAACiC,WAAW,EAAEE,OAAO,CAAC,CAACE,GAAG,CAACzC,EAAE,CAAC0C,MAAM,CAAC,GAAG,CAAC,CAAC;MACpE,IAAIxB,GAAG,GAAGlB,EAAE,CAACmB,IAAI,CAACX,IAAI,CAACgC,UAAU,EAAE9B,MAAM,CAACiC,UAAU,CAACC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACtE1B,GAAG,GAAGF,cAAc,CAACE,GAAG,EAAER,MAAM,CAACiC,UAAU,CAACE,iBAAiB,EAAE,KAAK,CAAC;MACrE3B,GAAG,GAAGF,cAAc,CAACE,GAAG,EAAER,MAAM,CAACiC,UAAU,CAACG,iBAAiB,CAAC;MAC9DzC,KAAK,CAACwB,KAAK,CAACE,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAACgB,OAAO,CAAC,UAAUC,GAAG,EAAE;QACrD9B,GAAG,GAAGM,SAAS,CAACN,GAAG,EAAER,MAAM,CAACuC,WAAW,CAAC,aAAa,GAAGD,GAAG,CAAC,CAAC;MACjE,CAAC,CAAC;MACF9B,GAAG,GAAGF,cAAc,CAACE,GAAG,EAAER,MAAM,CAACwC,SAAS,CAACC,eAAe,CAAC;MAC3DjC,GAAG,GAAGlB,EAAE,CAACmB,IAAI,CAAClB,sBAAsB,CAACiB,GAAG,EAAER,MAAM,CAACwC,SAAS,CAACE,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACnF,OAAOlC,GAAG;IACd,CAAC,CAAC;EACN,CAAC;EACDQ,YAAY,CAACM,SAAS,CAACqB,OAAO,GAAG,UAAUnB,KAAK,EAAE;IAC9C,OAAOrC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIyD,EAAE;MACN,OAAOvD,WAAW,CAAC,IAAI,EAAE,UAAUwD,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACFF,EAAE,GAAG,IAAI,CAACrB,YAAY;YACtB,OAAO,CAAC,CAAC,CAAC,WAAW/B,UAAU,CAACgC,KAAK,CAAC,CAAC;UAC3C,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,YAAYoB,EAAE,CAACG,KAAK,CAAC,IAAI,EAAE,CAACF,EAAE,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDhC,YAAY,CAACM,SAAS,CAAC2B,mBAAmB,GAAG,YAAY;IACrD,OAAO,qBAAqB;EAChC,CAAC;EACDjC,YAAY,CAACM,SAAS,CAACzB,0BAA0B,GAAG,UAAUqD,SAAS,EAAE;IACrE,OAAOrD,0BAA0B,CAACqD,SAAS,EAAE,IAAI,CAAC7B,cAAc,CAAC;EACrE,CAAC;EACDL,YAAY,CAACM,SAAS,CAAC1B,aAAa,GAAG,UAAUuD,OAAO,EAAE;IACtD,OAAOvD,aAAa,CAACuD,OAAO,EAAE,IAAI,CAAC9B,cAAc,CAAC;EACtD,CAAC;EACD,OAAOL,YAAY;AACvB,CAAC,CAACvB,aAAa,CAAE;AACjB,SAASuB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}