{"ast":null,"code":"import { AgeGenderNet } from '../ageGenderNet/AgeGenderNet';\nimport { FaceExpressionNet } from '../faceExpressionNet/FaceExpressionNet';\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\nimport { FaceRecognitionNet } from '../faceRecognitionNet/FaceRecognitionNet';\nimport { Mtcnn } from '../mtcnn/Mtcnn';\nimport { SsdMobilenetv1 } from '../ssdMobilenetv1/SsdMobilenetv1';\nimport { TinyFaceDetector } from '../tinyFaceDetector/TinyFaceDetector';\nimport { TinyYolov2 } from '../tinyYolov2';\nexport var nets = {\n  ssdMobilenetv1: new SsdMobilenetv1(),\n  tinyFaceDetector: new TinyFaceDetector(),\n  tinyYolov2: new TinyYolov2(),\n  mtcnn: new Mtcnn(),\n  faceLandmark68Net: new FaceLandmark68Net(),\n  faceLandmark68TinyNet: new FaceLandmark68TinyNet(),\n  faceRecognitionNet: new FaceRecognitionNet(),\n  faceExpressionNet: new FaceExpressionNet(),\n  ageGenderNet: new AgeGenderNet()\n};\n/**\r\n * Attempts to detect all faces in an image using SSD Mobilenetv1 Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see SsdMobilenetv1Options constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\nexport var ssdMobilenetv1 = function (input, options) {\n  return nets.ssdMobilenetv1.locateFaces(input, options);\n};\n/**\r\n * Attempts to detect all faces in an image using the Tiny Face Detector.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see TinyFaceDetectorOptions constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\nexport var tinyFaceDetector = function (input, options) {\n  return nets.tinyFaceDetector.locateFaces(input, options);\n};\n/**\r\n * Attempts to detect all faces in an image using the Tiny Yolov2 Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see TinyYolov2Options constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\nexport var tinyYolov2 = function (input, options) {\n  return nets.tinyYolov2.locateFaces(input, options);\n};\n/**\r\n * Attempts to detect all faces in an image and the 5 point face landmarks\r\n * of each detected face using the MTCNN Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see MtcnnOptions constructor for default parameters).\r\n * @returns Bounding box of each face with score and 5 point face landmarks.\r\n */\nexport var mtcnn = function (input, options) {\n  return nets.mtcnn.forward(input, options);\n};\n/**\r\n * Detects the 68 point face landmark positions of the face shown in an image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns 68 point face landmarks or array thereof in case of batch input.\r\n */\nexport var detectFaceLandmarks = function (input) {\n  return nets.faceLandmark68Net.detectLandmarks(input);\n};\n/**\r\n * Detects the 68 point face landmark positions of the face shown in an image\r\n * using a tinier version of the 68 point face landmark model, which is slightly\r\n * faster at inference, but also slightly less accurate.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns 68 point face landmarks or array thereof in case of batch input.\r\n */\nexport var detectFaceLandmarksTiny = function (input) {\n  return nets.faceLandmark68TinyNet.detectLandmarks(input);\n};\n/**\r\n * Computes a 128 entry vector (face descriptor / face embeddings) from the face shown in an image,\r\n * which uniquely represents the features of that persons face. The computed face descriptor can\r\n * be used to measure the similarity between faces, by computing the euclidean distance of two\r\n * face descriptors.\r\n *\r\n * @param inputs The face image extracted from the aligned bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Face descriptor with 128 entries or array thereof in case of batch input.\r\n */\nexport var computeFaceDescriptor = function (input) {\n  return nets.faceRecognitionNet.computeFaceDescriptor(input);\n};\n/**\r\n * Recognizes the facial expressions from a face image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Facial expressions with corresponding probabilities or array thereof in case of batch input.\r\n */\nexport var recognizeFaceExpressions = function (input) {\n  return nets.faceExpressionNet.predictExpressions(input);\n};\n/**\r\n * Predicts age and gender from a face image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Predictions with age, gender and gender probability or array thereof in case of batch input.\r\n */\nexport var predictAgeAndGender = function (input) {\n  return nets.ageGenderNet.predictAgeAndGender(input);\n};\nexport var loadSsdMobilenetv1Model = function (url) {\n  return nets.ssdMobilenetv1.load(url);\n};\nexport var loadTinyFaceDetectorModel = function (url) {\n  return nets.tinyFaceDetector.load(url);\n};\nexport var loadMtcnnModel = function (url) {\n  return nets.mtcnn.load(url);\n};\nexport var loadTinyYolov2Model = function (url) {\n  return nets.tinyYolov2.load(url);\n};\nexport var loadFaceLandmarkModel = function (url) {\n  return nets.faceLandmark68Net.load(url);\n};\nexport var loadFaceLandmarkTinyModel = function (url) {\n  return nets.faceLandmark68TinyNet.load(url);\n};\nexport var loadFaceRecognitionModel = function (url) {\n  return nets.faceRecognitionNet.load(url);\n};\nexport var loadFaceExpressionModel = function (url) {\n  return nets.faceExpressionNet.load(url);\n};\nexport var loadAgeGenderModel = function (url) {\n  return nets.ageGenderNet.load(url);\n};\n// backward compatibility\nexport var loadFaceDetectionModel = loadSsdMobilenetv1Model;\nexport var locateFaces = ssdMobilenetv1;\nexport var detectLandmarks = detectFaceLandmarks;","map":{"version":3,"names":["AgeGenderNet","FaceExpressionNet","FaceLandmark68Net","FaceLandmark68TinyNet","FaceRecognitionNet","Mtcnn","SsdMobilenetv1","TinyFaceDetector","TinyYolov2","nets","ssdMobilenetv1","tinyFaceDetector","tinyYolov2","mtcnn","faceLandmark68Net","faceLandmark68TinyNet","faceRecognitionNet","faceExpressionNet","ageGenderNet","input","options","locateFaces","forward","detectFaceLandmarks","detectLandmarks","detectFaceLandmarksTiny","computeFaceDescriptor","recognizeFaceExpressions","predictExpressions","predictAgeAndGender","loadSsdMobilenetv1Model","url","load","loadTinyFaceDetectorModel","loadMtcnnModel","loadTinyYolov2Model","loadFaceLandmarkModel","loadFaceLandmarkTinyModel","loadFaceRecognitionModel","loadFaceExpressionModel","loadAgeGenderModel","loadFaceDetectionModel"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/globalApi/nets.js"],"sourcesContent":["import { AgeGenderNet } from '../ageGenderNet/AgeGenderNet';\r\nimport { FaceExpressionNet } from '../faceExpressionNet/FaceExpressionNet';\r\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\r\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\r\nimport { FaceRecognitionNet } from '../faceRecognitionNet/FaceRecognitionNet';\r\nimport { Mtcnn } from '../mtcnn/Mtcnn';\r\nimport { SsdMobilenetv1 } from '../ssdMobilenetv1/SsdMobilenetv1';\r\nimport { TinyFaceDetector } from '../tinyFaceDetector/TinyFaceDetector';\r\nimport { TinyYolov2 } from '../tinyYolov2';\r\nexport var nets = {\r\n    ssdMobilenetv1: new SsdMobilenetv1(),\r\n    tinyFaceDetector: new TinyFaceDetector(),\r\n    tinyYolov2: new TinyYolov2(),\r\n    mtcnn: new Mtcnn(),\r\n    faceLandmark68Net: new FaceLandmark68Net(),\r\n    faceLandmark68TinyNet: new FaceLandmark68TinyNet(),\r\n    faceRecognitionNet: new FaceRecognitionNet(),\r\n    faceExpressionNet: new FaceExpressionNet(),\r\n    ageGenderNet: new AgeGenderNet()\r\n};\r\n/**\r\n * Attempts to detect all faces in an image using SSD Mobilenetv1 Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see SsdMobilenetv1Options constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\r\nexport var ssdMobilenetv1 = function (input, options) {\r\n    return nets.ssdMobilenetv1.locateFaces(input, options);\r\n};\r\n/**\r\n * Attempts to detect all faces in an image using the Tiny Face Detector.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see TinyFaceDetectorOptions constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\r\nexport var tinyFaceDetector = function (input, options) {\r\n    return nets.tinyFaceDetector.locateFaces(input, options);\r\n};\r\n/**\r\n * Attempts to detect all faces in an image using the Tiny Yolov2 Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see TinyYolov2Options constructor for default parameters).\r\n * @returns Bounding box of each face with score.\r\n */\r\nexport var tinyYolov2 = function (input, options) {\r\n    return nets.tinyYolov2.locateFaces(input, options);\r\n};\r\n/**\r\n * Attempts to detect all faces in an image and the 5 point face landmarks\r\n * of each detected face using the MTCNN Network.\r\n *\r\n * @param input The input image.\r\n * @param options (optional, default: see MtcnnOptions constructor for default parameters).\r\n * @returns Bounding box of each face with score and 5 point face landmarks.\r\n */\r\nexport var mtcnn = function (input, options) {\r\n    return nets.mtcnn.forward(input, options);\r\n};\r\n/**\r\n * Detects the 68 point face landmark positions of the face shown in an image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns 68 point face landmarks or array thereof in case of batch input.\r\n */\r\nexport var detectFaceLandmarks = function (input) {\r\n    return nets.faceLandmark68Net.detectLandmarks(input);\r\n};\r\n/**\r\n * Detects the 68 point face landmark positions of the face shown in an image\r\n * using a tinier version of the 68 point face landmark model, which is slightly\r\n * faster at inference, but also slightly less accurate.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns 68 point face landmarks or array thereof in case of batch input.\r\n */\r\nexport var detectFaceLandmarksTiny = function (input) {\r\n    return nets.faceLandmark68TinyNet.detectLandmarks(input);\r\n};\r\n/**\r\n * Computes a 128 entry vector (face descriptor / face embeddings) from the face shown in an image,\r\n * which uniquely represents the features of that persons face. The computed face descriptor can\r\n * be used to measure the similarity between faces, by computing the euclidean distance of two\r\n * face descriptors.\r\n *\r\n * @param inputs The face image extracted from the aligned bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Face descriptor with 128 entries or array thereof in case of batch input.\r\n */\r\nexport var computeFaceDescriptor = function (input) {\r\n    return nets.faceRecognitionNet.computeFaceDescriptor(input);\r\n};\r\n/**\r\n * Recognizes the facial expressions from a face image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Facial expressions with corresponding probabilities or array thereof in case of batch input.\r\n */\r\nexport var recognizeFaceExpressions = function (input) {\r\n    return nets.faceExpressionNet.predictExpressions(input);\r\n};\r\n/**\r\n * Predicts age and gender from a face image.\r\n *\r\n * @param inputs The face image extracted from the bounding box of a face. Can\r\n * also be an array of input images, which will be batch processed.\r\n * @returns Predictions with age, gender and gender probability or array thereof in case of batch input.\r\n */\r\nexport var predictAgeAndGender = function (input) {\r\n    return nets.ageGenderNet.predictAgeAndGender(input);\r\n};\r\nexport var loadSsdMobilenetv1Model = function (url) { return nets.ssdMobilenetv1.load(url); };\r\nexport var loadTinyFaceDetectorModel = function (url) { return nets.tinyFaceDetector.load(url); };\r\nexport var loadMtcnnModel = function (url) { return nets.mtcnn.load(url); };\r\nexport var loadTinyYolov2Model = function (url) { return nets.tinyYolov2.load(url); };\r\nexport var loadFaceLandmarkModel = function (url) { return nets.faceLandmark68Net.load(url); };\r\nexport var loadFaceLandmarkTinyModel = function (url) { return nets.faceLandmark68TinyNet.load(url); };\r\nexport var loadFaceRecognitionModel = function (url) { return nets.faceRecognitionNet.load(url); };\r\nexport var loadFaceExpressionModel = function (url) { return nets.faceExpressionNet.load(url); };\r\nexport var loadAgeGenderModel = function (url) { return nets.ageGenderNet.load(url); };\r\n// backward compatibility\r\nexport var loadFaceDetectionModel = loadSsdMobilenetv1Model;\r\nexport var locateFaces = ssdMobilenetv1;\r\nexport var detectLandmarks = detectFaceLandmarks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}