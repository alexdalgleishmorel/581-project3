{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nvar epsilon = 0.0010000000474974513;\nfunction depthwiseConvLayer(x, params, strides) {\n  return tf.tidy(function () {\n    var out = tf.depthwiseConv2d(x, params.filters, strides, 'same');\n    out = tf.batchNorm(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);\n    return tf.clipByValue(out, 0, 6);\n  });\n}\nfunction getStridesForLayerIdx(layerIdx) {\n  return [2, 4, 6, 12].some(function (idx) {\n    return idx === layerIdx;\n  }) ? [2, 2] : [1, 1];\n}\nexport function mobileNetV1(x, params) {\n  return tf.tidy(function () {\n    var conv11 = null;\n    var out = pointwiseConvLayer(x, params.conv_0, [2, 2]);\n    var convPairParams = [params.conv_1, params.conv_2, params.conv_3, params.conv_4, params.conv_5, params.conv_6, params.conv_7, params.conv_8, params.conv_9, params.conv_10, params.conv_11, params.conv_12, params.conv_13];\n    convPairParams.forEach(function (param, i) {\n      var layerIdx = i + 1;\n      var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);\n      out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);\n      out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);\n      if (layerIdx === 11) {\n        conv11 = out;\n      }\n    });\n    if (conv11 === null) {\n      throw new Error('mobileNetV1 - output of conv layer 11 is null');\n    }\n    return {\n      out: out,\n      conv11: conv11\n    };\n  });\n}","map":{"version":3,"names":["tf","pointwiseConvLayer","epsilon","depthwiseConvLayer","x","params","strides","tidy","out","depthwiseConv2d","filters","batchNorm","batch_norm_mean","batch_norm_variance","batch_norm_offset","batch_norm_scale","clipByValue","getStridesForLayerIdx","layerIdx","some","idx","mobileNetV1","conv11","conv_0","convPairParams","conv_1","conv_2","conv_3","conv_4","conv_5","conv_6","conv_7","conv_8","conv_9","conv_10","conv_11","conv_12","conv_13","forEach","param","i","depthwiseConvStrides","depthwise_conv","pointwise_conv","Error"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/ssdMobilenetv1/mobileNetV1.js"],"sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\r\nvar epsilon = 0.0010000000474974513;\r\nfunction depthwiseConvLayer(x, params, strides) {\r\n    return tf.tidy(function () {\r\n        var out = tf.depthwiseConv2d(x, params.filters, strides, 'same');\r\n        out = tf.batchNorm(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);\r\n        return tf.clipByValue(out, 0, 6);\r\n    });\r\n}\r\nfunction getStridesForLayerIdx(layerIdx) {\r\n    return [2, 4, 6, 12].some(function (idx) { return idx === layerIdx; }) ? [2, 2] : [1, 1];\r\n}\r\nexport function mobileNetV1(x, params) {\r\n    return tf.tidy(function () {\r\n        var conv11 = null;\r\n        var out = pointwiseConvLayer(x, params.conv_0, [2, 2]);\r\n        var convPairParams = [\r\n            params.conv_1,\r\n            params.conv_2,\r\n            params.conv_3,\r\n            params.conv_4,\r\n            params.conv_5,\r\n            params.conv_6,\r\n            params.conv_7,\r\n            params.conv_8,\r\n            params.conv_9,\r\n            params.conv_10,\r\n            params.conv_11,\r\n            params.conv_12,\r\n            params.conv_13\r\n        ];\r\n        convPairParams.forEach(function (param, i) {\r\n            var layerIdx = i + 1;\r\n            var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);\r\n            out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);\r\n            out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);\r\n            if (layerIdx === 11) {\r\n                conv11 = out;\r\n            }\r\n        });\r\n        if (conv11 === null) {\r\n            throw new Error('mobileNetV1 - output of conv layer 11 is null');\r\n        }\r\n        return {\r\n            out: out,\r\n            conv11: conv11\r\n        };\r\n    });\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,uBAAuB;AAC3C,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,IAAIC,OAAO,GAAG,qBAAqB;AACnC,SAASC,kBAAkBA,CAACC,CAAC,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC5C,OAAON,EAAE,CAACO,IAAI,CAAC,YAAY;IACvB,IAAIC,GAAG,GAAGR,EAAE,CAACS,eAAe,CAACL,CAAC,EAAEC,MAAM,CAACK,OAAO,EAAEJ,OAAO,EAAE,MAAM,CAAC;IAChEE,GAAG,GAAGR,EAAE,CAACW,SAAS,CAACH,GAAG,EAAEH,MAAM,CAACO,eAAe,EAAEP,MAAM,CAACQ,mBAAmB,EAAER,MAAM,CAACS,iBAAiB,EAAET,MAAM,CAACU,gBAAgB,EAAEb,OAAO,CAAC;IACvI,OAAOF,EAAE,CAACgB,WAAW,CAACR,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC,CAAC;AACN;AACA,SAASS,qBAAqBA,CAACC,QAAQ,EAAE;EACrC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,UAAUC,GAAG,EAAE;IAAE,OAAOA,GAAG,KAAKF,QAAQ;EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5F;AACA,OAAO,SAASG,WAAWA,CAACjB,CAAC,EAAEC,MAAM,EAAE;EACnC,OAAOL,EAAE,CAACO,IAAI,CAAC,YAAY;IACvB,IAAIe,MAAM,GAAG,IAAI;IACjB,IAAId,GAAG,GAAGP,kBAAkB,CAACG,CAAC,EAAEC,MAAM,CAACkB,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,IAAIC,cAAc,GAAG,CACjBnB,MAAM,CAACoB,MAAM,EACbpB,MAAM,CAACqB,MAAM,EACbrB,MAAM,CAACsB,MAAM,EACbtB,MAAM,CAACuB,MAAM,EACbvB,MAAM,CAACwB,MAAM,EACbxB,MAAM,CAACyB,MAAM,EACbzB,MAAM,CAAC0B,MAAM,EACb1B,MAAM,CAAC2B,MAAM,EACb3B,MAAM,CAAC4B,MAAM,EACb5B,MAAM,CAAC6B,OAAO,EACd7B,MAAM,CAAC8B,OAAO,EACd9B,MAAM,CAAC+B,OAAO,EACd/B,MAAM,CAACgC,OAAO,CACjB;IACDb,cAAc,CAACc,OAAO,CAAC,UAAUC,KAAK,EAAEC,CAAC,EAAE;MACvC,IAAItB,QAAQ,GAAGsB,CAAC,GAAG,CAAC;MACpB,IAAIC,oBAAoB,GAAGxB,qBAAqB,CAACC,QAAQ,CAAC;MAC1DV,GAAG,GAAGL,kBAAkB,CAACK,GAAG,EAAE+B,KAAK,CAACG,cAAc,EAAED,oBAAoB,CAAC;MACzEjC,GAAG,GAAGP,kBAAkB,CAACO,GAAG,EAAE+B,KAAK,CAACI,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC3D,IAAIzB,QAAQ,KAAK,EAAE,EAAE;QACjBI,MAAM,GAAGd,GAAG;MAChB;IACJ,CAAC,CAAC;IACF,IAAIc,MAAM,KAAK,IAAI,EAAE;MACjB,MAAM,IAAIsB,KAAK,CAAC,+CAA+C,CAAC;IACpE;IACA,OAAO;MACHpC,GAAG,EAAEA,GAAG;MACRc,MAAM,EAAEA;IACZ,CAAC;EACL,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}