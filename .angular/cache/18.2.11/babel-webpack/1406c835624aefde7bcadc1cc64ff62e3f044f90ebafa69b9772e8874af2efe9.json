{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { seperateWeightMaps } from './util';\nvar FaceProcessor = /** @class */function (_super) {\n  __extends(FaceProcessor, _super);\n  function FaceProcessor(_name, faceFeatureExtractor) {\n    var _this = _super.call(this, _name) || this;\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n  Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\n    get: function () {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  FaceProcessor.prototype.runNet = function (input) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  };\n  FaceProcessor.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n  FaceProcessor.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n      params = _a.params,\n      paramMappings = _a.paramMappings;\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n  FaceProcessor.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  };\n  FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n      featureExtractorMap = _a.featureExtractorMap,\n      classifierMap = _a.classifierMap;\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n  FaceProcessor.prototype.extractParams = function (weights) {\n    var cIn = this.getClassifierChannelsIn();\n    var cOut = this.getClassifierChannelsOut();\n    var classifierWeightSize = cOut * cIn + cOut;\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n  return FaceProcessor;\n}(NeuralNetwork);\nexport { FaceProcessor };","map":{"version":3,"names":["__extends","tf","fullyConnectedLayer","NetInput","NeuralNetwork","extractParams","extractParamsFromWeigthMap","seperateWeightMaps","FaceProcessor","_super","_name","faceFeatureExtractor","_this","call","_faceFeatureExtractor","Object","defineProperty","prototype","get","enumerable","configurable","runNet","input","params","Error","tidy","bottleneckFeatures","forwardInput","as2D","shape","fc","dispose","throwOnRedispose","loadClassifierParams","weights","_a","extractClassifierParams","paramMappings","_params","_paramMappings","getClassifierChannelsIn","getClassifierChannelsOut","weightMap","featureExtractorMap","classifierMap","loadFromWeightMap","cIn","cOut","classifierWeightSize","featureExtractorWeights","slice","length","classifierWeights","extractWeights"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/faceProcessor/FaceProcessor.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport { NetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { seperateWeightMaps } from './util';\r\nvar FaceProcessor = /** @class */ (function (_super) {\r\n    __extends(FaceProcessor, _super);\r\n    function FaceProcessor(_name, faceFeatureExtractor) {\r\n        var _this = _super.call(this, _name) || this;\r\n        _this._faceFeatureExtractor = faceFeatureExtractor;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\r\n        get: function () {\r\n            return this._faceFeatureExtractor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FaceProcessor.prototype.runNet = function (input) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error(this._name + \" - load model before inference\");\r\n        }\r\n        return tf.tidy(function () {\r\n            var bottleneckFeatures = input instanceof NetInput\r\n                ? _this.faceFeatureExtractor.forwardInput(input)\r\n                : input;\r\n            return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\r\n        });\r\n    };\r\n    FaceProcessor.prototype.dispose = function (throwOnRedispose) {\r\n        if (throwOnRedispose === void 0) { throwOnRedispose = true; }\r\n        this.faceFeatureExtractor.dispose(throwOnRedispose);\r\n        _super.prototype.dispose.call(this, throwOnRedispose);\r\n    };\r\n    FaceProcessor.prototype.loadClassifierParams = function (weights) {\r\n        var _a = this.extractClassifierParams(weights), params = _a.params, paramMappings = _a.paramMappings;\r\n        this._params = params;\r\n        this._paramMappings = paramMappings;\r\n    };\r\n    FaceProcessor.prototype.extractClassifierParams = function (weights) {\r\n        return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\r\n    };\r\n    FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        var _a = seperateWeightMaps(weightMap), featureExtractorMap = _a.featureExtractorMap, classifierMap = _a.classifierMap;\r\n        this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\r\n        return extractParamsFromWeigthMap(classifierMap);\r\n    };\r\n    FaceProcessor.prototype.extractParams = function (weights) {\r\n        var cIn = this.getClassifierChannelsIn();\r\n        var cOut = this.getClassifierChannelsOut();\r\n        var classifierWeightSize = (cOut * cIn) + cOut;\r\n        var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\r\n        var classifierWeights = weights.slice(weights.length - classifierWeightSize);\r\n        this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\r\n        return this.extractClassifierParams(classifierWeights);\r\n    };\r\n    return FaceProcessor;\r\n}(NeuralNetwork));\r\nexport { FaceProcessor };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}