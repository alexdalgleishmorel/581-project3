{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { isTensor3D, isTensor4D } from '../utils';\n/**\r\n * Extracts the tensors of the image regions containing the detected faces.\r\n * Useful if you want to compute the face descriptors for the face images.\r\n * Using this method is faster then extracting a canvas for each face and\r\n * converting them to tensors individually.\r\n *\r\n * @param imageTensor The image tensor that face detection has been performed on.\r\n * @param detections The face detection results or face bounding boxes for that image.\r\n * @returns Tensors of the corresponding image region for each detected face.\r\n */\nexport function extractFaceTensors(imageTensor, detections) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) {\n        throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D');\n      }\n      if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) {\n        throw new Error('extractFaceTensors - batchSize > 1 not supported');\n      }\n      return [2 /*return*/, tf.tidy(function () {\n        var _a = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0),\n          imgHeight = _a[0],\n          imgWidth = _a[1],\n          numChannels = _a[2];\n        var boxes = detections.map(function (det) {\n          return det instanceof FaceDetection ? det.forSize(imgWidth, imgHeight).box : det;\n        }).map(function (box) {\n          return box.clipAtImageBorders(imgWidth, imgHeight);\n        });\n        var faceTensors = boxes.map(function (_a) {\n          var x = _a.x,\n            y = _a.y,\n            width = _a.width,\n            height = _a.height;\n          return tf.slice3d(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y, x, 0], [height, width, numChannels]);\n        });\n        return faceTensors;\n      })];\n    });\n  });\n}","map":{"version":3,"names":["__awaiter","__generator","tf","FaceDetection","isTensor3D","isTensor4D","extractFaceTensors","imageTensor","detections","_a","Error","shape","tidy","slice","imgHeight","imgWidth","numChannels","boxes","map","det","forSize","box","clipAtImageBorders","faceTensors","x","y","width","height","slice3d","as3D"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/dom/extractFaceTensors.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { FaceDetection } from '../classes/FaceDetection';\r\nimport { isTensor3D, isTensor4D } from '../utils';\r\n/**\r\n * Extracts the tensors of the image regions containing the detected faces.\r\n * Useful if you want to compute the face descriptors for the face images.\r\n * Using this method is faster then extracting a canvas for each face and\r\n * converting them to tensors individually.\r\n *\r\n * @param imageTensor The image tensor that face detection has been performed on.\r\n * @param detections The face detection results or face bounding boxes for that image.\r\n * @returns Tensors of the corresponding image region for each detected face.\r\n */\r\nexport function extractFaceTensors(imageTensor, detections) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) {\r\n                throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D');\r\n            }\r\n            if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) {\r\n                throw new Error('extractFaceTensors - batchSize > 1 not supported');\r\n            }\r\n            return [2 /*return*/, tf.tidy(function () {\r\n                    var _a = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0), imgHeight = _a[0], imgWidth = _a[1], numChannels = _a[2];\r\n                    var boxes = detections.map(function (det) { return det instanceof FaceDetection\r\n                        ? det.forSize(imgWidth, imgHeight).box\r\n                        : det; })\r\n                        .map(function (box) { return box.clipAtImageBorders(imgWidth, imgHeight); });\r\n                    var faceTensors = boxes.map(function (_a) {\r\n                        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n                        return tf.slice3d(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y, x, 0], [height, width, numChannels]);\r\n                    });\r\n                    return faceTensors;\r\n                })];\r\n        });\r\n    });\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,OAAO,KAAKC,EAAE,MAAM,uBAAuB;AAC3C,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,UAAU,EAAEC,UAAU,QAAQ,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EACxD,OAAOR,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;IAC/C,OAAOC,WAAW,CAAC,IAAI,EAAE,UAAUQ,EAAE,EAAE;MACnC,IAAI,CAACL,UAAU,CAACG,WAAW,CAAC,IAAI,CAACF,UAAU,CAACE,WAAW,CAAC,EAAE;QACtD,MAAM,IAAIG,KAAK,CAAC,2DAA2D,CAAC;MAChF;MACA,IAAIL,UAAU,CAACE,WAAW,CAAC,IAAIA,WAAW,CAACI,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;QACrD,MAAM,IAAID,KAAK,CAAC,kDAAkD,CAAC;MACvE;MACA,OAAO,CAAC,CAAC,CAAC,YAAYR,EAAE,CAACU,IAAI,CAAC,YAAY;QAClC,IAAIH,EAAE,GAAGF,WAAW,CAACI,KAAK,CAACE,KAAK,CAACR,UAAU,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAAEO,SAAS,GAAGL,EAAE,CAAC,CAAC,CAAC;UAAEM,QAAQ,GAAGN,EAAE,CAAC,CAAC,CAAC;UAAEO,WAAW,GAAGP,EAAE,CAAC,CAAC,CAAC;QAC3H,IAAIQ,KAAK,GAAGT,UAAU,CAACU,GAAG,CAAC,UAAUC,GAAG,EAAE;UAAE,OAAOA,GAAG,YAAYhB,aAAa,GACzEgB,GAAG,CAACC,OAAO,CAACL,QAAQ,EAAED,SAAS,CAAC,CAACO,GAAG,GACpCF,GAAG;QAAE,CAAC,CAAC,CACRD,GAAG,CAAC,UAAUG,GAAG,EAAE;UAAE,OAAOA,GAAG,CAACC,kBAAkB,CAACP,QAAQ,EAAED,SAAS,CAAC;QAAE,CAAC,CAAC;QAChF,IAAIS,WAAW,GAAGN,KAAK,CAACC,GAAG,CAAC,UAAUT,EAAE,EAAE;UACtC,IAAIe,CAAC,GAAGf,EAAE,CAACe,CAAC;YAAEC,CAAC,GAAGhB,EAAE,CAACgB,CAAC;YAAEC,KAAK,GAAGjB,EAAE,CAACiB,KAAK;YAAEC,MAAM,GAAGlB,EAAE,CAACkB,MAAM;UAC5D,OAAOzB,EAAE,CAAC0B,OAAO,CAACrB,WAAW,CAACsB,IAAI,CAACf,SAAS,EAAEC,QAAQ,EAAEC,WAAW,CAAC,EAAE,CAACS,CAAC,EAAED,CAAC,EAAE,CAAC,CAAC,EAAE,CAACG,MAAM,EAAED,KAAK,EAAEV,WAAW,CAAC,CAAC;QAClH,CAAC,CAAC;QACF,OAAOO,WAAW;MACtB,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;EACN,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}