{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox } from '../classes/BoundingBox';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { convLayer } from '../common';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { sigmoid } from '../ops';\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\nimport { normalize } from '../ops/normalize';\nimport { validateConfig } from './config';\nimport { convWithBatchNorm } from './convWithBatchNorm';\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { leaky } from './leaky';\nimport { TinyYolov2Options } from './TinyYolov2Options';\nvar TinyYolov2Base = /** @class */function (_super) {\n  __extends(TinyYolov2Base, _super);\n  function TinyYolov2Base(config) {\n    var _this = _super.call(this, 'TinyYolov2') || this;\n    validateConfig(config);\n    _this._config = config;\n    return _this;\n  }\n  Object.defineProperty(TinyYolov2Base.prototype, \"config\", {\n    get: function () {\n      return this._config;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2Base.prototype, \"withClassScores\", {\n    get: function () {\n      return this.config.withClassScores || this.config.classes.length > 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2Base.prototype, \"boxEncodingSize\", {\n    get: function () {\n      return 5 + (this.withClassScores ? this.config.classes.length : 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TinyYolov2Base.prototype.runTinyYolov2 = function (x, params) {\n    var out = convWithBatchNorm(x, params.conv0);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = convWithBatchNorm(out, params.conv6);\n    out = convWithBatchNorm(out, params.conv7);\n    return convLayer(out, params.conv8, 'valid', false);\n  };\n  TinyYolov2Base.prototype.runMobilenet = function (x, params) {\n    var out = this.config.isFirstLayerConv2d ? leaky(convLayer(x, params.conv0, 'valid', false)) : depthwiseSeparableConv(x, params.conv0);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;\n    out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;\n    return convLayer(out, params.conv8, 'valid', false);\n  };\n  TinyYolov2Base.prototype.forwardInput = function (input, inputSize) {\n    var _this = this;\n    var params = this.params;\n    if (!params) {\n      throw new Error('TinyYolov2 - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(inputSize, false).toFloat();\n      batchTensor = _this.config.meanRgb ? normalize(batchTensor, _this.config.meanRgb) : batchTensor;\n      batchTensor = batchTensor.div(tf.scalar(256));\n      return _this.config.withSeparableConvs ? _this.runMobilenet(batchTensor, params) : _this.runTinyYolov2(batchTensor, params);\n    });\n  };\n  TinyYolov2Base.prototype.forward = function (input, inputSize) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [4 /*yield*/, _a.apply(this, [_b.sent(), inputSize])];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  TinyYolov2Base.prototype.detect = function (input, forwardParams) {\n    if (forwardParams === void 0) {\n      forwardParams = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = new TinyYolov2Options(forwardParams), inputSize = _a.inputSize, scoreThreshold = _a.scoreThreshold;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _b.sent();\n            return [4 /*yield*/, this.forwardInput(netInput, inputSize)];\n          case 2:\n            out = _b.sent();\n            out0 = tf.tidy(function () {\n              return tf.unstack(out)[0].expandDims();\n            });\n            inputDimensions = {\n              width: netInput.getInputWidth(0),\n              height: netInput.getInputHeight(0)\n            };\n            return [4 /*yield*/, this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)];\n          case 3:\n            results = _b.sent();\n            out.dispose();\n            out0.dispose();\n            boxes = results.map(function (res) {\n              return res.box;\n            });\n            scores = results.map(function (res) {\n              return res.score;\n            });\n            classScores = results.map(function (res) {\n              return res.classScore;\n            });\n            classNames = results.map(function (res) {\n              return _this.config.classes[res.label];\n            });\n            indices = nonMaxSuppression(boxes.map(function (box) {\n              return box.rescale(inputSize);\n            }), scores, this.config.iouThreshold, true);\n            detections = indices.map(function (idx) {\n              return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);\n            });\n            return [2 /*return*/, detections];\n        }\n      });\n    });\n  };\n  TinyYolov2Base.prototype.getDefaultModelName = function () {\n    return '';\n  };\n  TinyYolov2Base.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this.config);\n  };\n  TinyYolov2Base.prototype.extractParams = function (weights) {\n    var filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES;\n    var numFilters = filterSizes ? filterSizes.length : undefined;\n    if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\n      throw new Error(\"TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found \" + numFilters + \" filterSizes in config\");\n    }\n    return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);\n  };\n  TinyYolov2Base.prototype.extractBoxes = function (outputTensor, inputBlobDimensions, scoreThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x, y, pos, _b, classScore, label, _c;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            width = inputBlobDimensions.width, height = inputBlobDimensions.height;\n            inputSize = Math.max(width, height);\n            correctionFactorX = inputSize / width;\n            correctionFactorY = inputSize / height;\n            numCells = outputTensor.shape[1];\n            numBoxes = this.config.anchors.length;\n            _a = tf.tidy(function () {\n              var reshaped = outputTensor.reshape([numCells, numCells, numBoxes, _this.boxEncodingSize]);\n              var boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);\n              var scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);\n              var classScores = _this.withClassScores ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, _this.config.classes.length]), 3) : tf.scalar(0);\n              return [boxes, scores, classScores];\n            }), boxesTensor = _a[0], scoresTensor = _a[1], classScoresTensor = _a[2];\n            results = [];\n            return [4 /*yield*/, scoresTensor.array()];\n          case 1:\n            scoresData = _d.sent();\n            return [4 /*yield*/, boxesTensor.array()];\n          case 2:\n            boxesData = _d.sent();\n            row = 0;\n            _d.label = 3;\n          case 3:\n            if (!(row < numCells)) return [3 /*break*/, 12];\n            col = 0;\n            _d.label = 4;\n          case 4:\n            if (!(col < numCells)) return [3 /*break*/, 11];\n            anchor = 0;\n            _d.label = 5;\n          case 5:\n            if (!(anchor < numBoxes)) return [3 /*break*/, 10];\n            score = sigmoid(scoresData[row][col][anchor][0]);\n            if (!(!scoreThreshold || score > scoreThreshold)) return [3 /*break*/, 9];\n            ctX = (col + sigmoid(boxesData[row][col][anchor][0])) / numCells * correctionFactorX;\n            ctY = (row + sigmoid(boxesData[row][col][anchor][1])) / numCells * correctionFactorY;\n            width_1 = Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x / numCells * correctionFactorX;\n            height_1 = Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y / numCells * correctionFactorY;\n            x = ctX - width_1 / 2;\n            y = ctY - height_1 / 2;\n            pos = {\n              row: row,\n              col: col,\n              anchor: anchor\n            };\n            if (!this.withClassScores) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.extractPredictedClass(classScoresTensor, pos)];\n          case 6:\n            _c = _d.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _c = {\n              classScore: 1,\n              label: 0\n            };\n            _d.label = 8;\n          case 8:\n            _b = _c, classScore = _b.classScore, label = _b.label;\n            results.push(__assign({\n              box: new BoundingBox(x, y, x + width_1, y + height_1),\n              score: score,\n              classScore: score * classScore,\n              label: label\n            }, pos));\n            _d.label = 9;\n          case 9:\n            anchor++;\n            return [3 /*break*/, 5];\n          case 10:\n            col++;\n            return [3 /*break*/, 4];\n          case 11:\n            row++;\n            return [3 /*break*/, 3];\n          case 12:\n            boxesTensor.dispose();\n            scoresTensor.dispose();\n            classScoresTensor.dispose();\n            return [2 /*return*/, results];\n        }\n      });\n    });\n  };\n  TinyYolov2Base.prototype.extractPredictedClass = function (classesTensor, pos) {\n    return __awaiter(this, void 0, void 0, function () {\n      var row, col, anchor, classesData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            row = pos.row, col = pos.col, anchor = pos.anchor;\n            return [4 /*yield*/, classesTensor.array()];\n          case 1:\n            classesData = _a.sent();\n            return [2 /*return*/, Array(this.config.classes.length).fill(0).map(function (_, i) {\n              return classesData[row][col][anchor][i];\n            }).map(function (classScore, label) {\n              return {\n                classScore: classScore,\n                label: label\n              };\n            }).reduce(function (max, curr) {\n              return max.classScore > curr.classScore ? max : curr;\n            })];\n        }\n      });\n    });\n  };\n  TinyYolov2Base.DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024];\n  return TinyYolov2Base;\n}(NeuralNetwork);\nexport { TinyYolov2Base };","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","tf","BoundingBox","ObjectDetection","convLayer","toNetInput","NeuralNetwork","sigmoid","nonMaxSuppression","normalize","validateConfig","convWithBatchNorm","depthwiseSeparableConv","extractParams","extractParamsFromWeigthMap","leaky","TinyYolov2Options","TinyYolov2Base","_super","config","_this","call","_config","Object","defineProperty","prototype","get","enumerable","configurable","withClassScores","classes","length","runTinyYolov2","x","params","out","conv0","maxPool","conv1","conv2","conv3","conv4","conv5","conv6","conv7","conv8","runMobilenet","isFirstLayerConv2d","forwardInput","input","inputSize","Error","tidy","batchTensor","toBatchTensor","toFloat","meanRgb","div","scalar","withSeparableConvs","forward","_a","_b","label","apply","sent","detect","forwardParams","scoreThreshold","netInput","out0","inputDimensions","results","boxes","scores","classScores","classNames","indices","detections","unstack","expandDims","width","getInputWidth","height","getInputHeight","extractBoxes","getReshapedInputDimensions","dispose","map","res","box","score","classScore","rescale","iouThreshold","idx","getDefaultModelName","weightMap","weights","filterSizes","DEFAULT_FILTER_SIZES","numFilters","undefined","boxEncodingSize","outputTensor","inputBlobDimensions","correctionFactorX","correctionFactorY","numCells","numBoxes","boxesTensor","scoresTensor","classScoresTensor","scoresData","boxesData","row","col","anchor","ctX","ctY","width_1","height_1","y","pos","_c","_d","Math","max","shape","anchors","reshaped","reshape","slice","softmax","array","exp","extractPredictedClass","push","classesTensor","classesData","Array","fill","_","i","reduce","curr"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/tinyYolov2/TinyYolov2Base.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { BoundingBox } from '../classes/BoundingBox';\r\nimport { ObjectDetection } from '../classes/ObjectDetection';\r\nimport { convLayer } from '../common';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { sigmoid } from '../ops';\r\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\r\nimport { normalize } from '../ops/normalize';\r\nimport { validateConfig } from './config';\r\nimport { convWithBatchNorm } from './convWithBatchNorm';\r\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { leaky } from './leaky';\r\nimport { TinyYolov2Options } from './TinyYolov2Options';\r\nvar TinyYolov2Base = /** @class */ (function (_super) {\r\n    __extends(TinyYolov2Base, _super);\r\n    function TinyYolov2Base(config) {\r\n        var _this = _super.call(this, 'TinyYolov2') || this;\r\n        validateConfig(config);\r\n        _this._config = config;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"config\", {\r\n        get: function () {\r\n            return this._config;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"withClassScores\", {\r\n        get: function () {\r\n            return this.config.withClassScores || this.config.classes.length > 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"boxEncodingSize\", {\r\n        get: function () {\r\n            return 5 + (this.withClassScores ? this.config.classes.length : 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TinyYolov2Base.prototype.runTinyYolov2 = function (x, params) {\r\n        var out = convWithBatchNorm(x, params.conv0);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv1);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv2);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv3);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv4);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv5);\r\n        out = tf.maxPool(out, [2, 2], [1, 1], 'same');\r\n        out = convWithBatchNorm(out, params.conv6);\r\n        out = convWithBatchNorm(out, params.conv7);\r\n        return convLayer(out, params.conv8, 'valid', false);\r\n    };\r\n    TinyYolov2Base.prototype.runMobilenet = function (x, params) {\r\n        var out = this.config.isFirstLayerConv2d\r\n            ? leaky(convLayer(x, params.conv0, 'valid', false))\r\n            : depthwiseSeparableConv(x, params.conv0);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv1);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv2);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv3);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv4);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv5);\r\n        out = tf.maxPool(out, [2, 2], [1, 1], 'same');\r\n        out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;\r\n        out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;\r\n        return convLayer(out, params.conv8, 'valid', false);\r\n    };\r\n    TinyYolov2Base.prototype.forwardInput = function (input, inputSize) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('TinyYolov2 - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(inputSize, false).toFloat();\r\n            batchTensor = _this.config.meanRgb\r\n                ? normalize(batchTensor, _this.config.meanRgb)\r\n                : batchTensor;\r\n            batchTensor = batchTensor.div(tf.scalar(256));\r\n            return _this.config.withSeparableConvs\r\n                ? _this.runMobilenet(batchTensor, params)\r\n                : _this.runTinyYolov2(batchTensor, params);\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.forward = function (input, inputSize) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [4 /*yield*/, _a.apply(this, [_b.sent(), inputSize])];\r\n                    case 2: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.detect = function (input, forwardParams) {\r\n        if (forwardParams === void 0) { forwardParams = {}; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = new TinyYolov2Options(forwardParams), inputSize = _a.inputSize, scoreThreshold = _a.scoreThreshold;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1:\r\n                        netInput = _b.sent();\r\n                        return [4 /*yield*/, this.forwardInput(netInput, inputSize)];\r\n                    case 2:\r\n                        out = _b.sent();\r\n                        out0 = tf.tidy(function () { return tf.unstack(out)[0].expandDims(); });\r\n                        inputDimensions = {\r\n                            width: netInput.getInputWidth(0),\r\n                            height: netInput.getInputHeight(0)\r\n                        };\r\n                        return [4 /*yield*/, this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)];\r\n                    case 3:\r\n                        results = _b.sent();\r\n                        out.dispose();\r\n                        out0.dispose();\r\n                        boxes = results.map(function (res) { return res.box; });\r\n                        scores = results.map(function (res) { return res.score; });\r\n                        classScores = results.map(function (res) { return res.classScore; });\r\n                        classNames = results.map(function (res) { return _this.config.classes[res.label]; });\r\n                        indices = nonMaxSuppression(boxes.map(function (box) { return box.rescale(inputSize); }), scores, this.config.iouThreshold, true);\r\n                        detections = indices.map(function (idx) {\r\n                            return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);\r\n                        });\r\n                        return [2 /*return*/, detections];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.getDefaultModelName = function () {\r\n        return '';\r\n    };\r\n    TinyYolov2Base.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap, this.config);\r\n    };\r\n    TinyYolov2Base.prototype.extractParams = function (weights) {\r\n        var filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES;\r\n        var numFilters = filterSizes ? filterSizes.length : undefined;\r\n        if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\r\n            throw new Error(\"TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found \" + numFilters + \" filterSizes in config\");\r\n        }\r\n        return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);\r\n    };\r\n    TinyYolov2Base.prototype.extractBoxes = function (outputTensor, inputBlobDimensions, scoreThreshold) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x, y, pos, _b, classScore, label, _c;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        width = inputBlobDimensions.width, height = inputBlobDimensions.height;\r\n                        inputSize = Math.max(width, height);\r\n                        correctionFactorX = inputSize / width;\r\n                        correctionFactorY = inputSize / height;\r\n                        numCells = outputTensor.shape[1];\r\n                        numBoxes = this.config.anchors.length;\r\n                        _a = tf.tidy(function () {\r\n                            var reshaped = outputTensor.reshape([numCells, numCells, numBoxes, _this.boxEncodingSize]);\r\n                            var boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);\r\n                            var scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);\r\n                            var classScores = _this.withClassScores\r\n                                ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, _this.config.classes.length]), 3)\r\n                                : tf.scalar(0);\r\n                            return [boxes, scores, classScores];\r\n                        }), boxesTensor = _a[0], scoresTensor = _a[1], classScoresTensor = _a[2];\r\n                        results = [];\r\n                        return [4 /*yield*/, scoresTensor.array()];\r\n                    case 1:\r\n                        scoresData = _d.sent();\r\n                        return [4 /*yield*/, boxesTensor.array()];\r\n                    case 2:\r\n                        boxesData = _d.sent();\r\n                        row = 0;\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        if (!(row < numCells)) return [3 /*break*/, 12];\r\n                        col = 0;\r\n                        _d.label = 4;\r\n                    case 4:\r\n                        if (!(col < numCells)) return [3 /*break*/, 11];\r\n                        anchor = 0;\r\n                        _d.label = 5;\r\n                    case 5:\r\n                        if (!(anchor < numBoxes)) return [3 /*break*/, 10];\r\n                        score = sigmoid(scoresData[row][col][anchor][0]);\r\n                        if (!(!scoreThreshold || score > scoreThreshold)) return [3 /*break*/, 9];\r\n                        ctX = ((col + sigmoid(boxesData[row][col][anchor][0])) / numCells) * correctionFactorX;\r\n                        ctY = ((row + sigmoid(boxesData[row][col][anchor][1])) / numCells) * correctionFactorY;\r\n                        width_1 = ((Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x) / numCells) * correctionFactorX;\r\n                        height_1 = ((Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y) / numCells) * correctionFactorY;\r\n                        x = (ctX - (width_1 / 2));\r\n                        y = (ctY - (height_1 / 2));\r\n                        pos = { row: row, col: col, anchor: anchor };\r\n                        if (!this.withClassScores) return [3 /*break*/, 7];\r\n                        return [4 /*yield*/, this.extractPredictedClass(classScoresTensor, pos)];\r\n                    case 6:\r\n                        _c = _d.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 7:\r\n                        _c = { classScore: 1, label: 0 };\r\n                        _d.label = 8;\r\n                    case 8:\r\n                        _b = _c, classScore = _b.classScore, label = _b.label;\r\n                        results.push(__assign({ box: new BoundingBox(x, y, x + width_1, y + height_1), score: score, classScore: score * classScore, label: label }, pos));\r\n                        _d.label = 9;\r\n                    case 9:\r\n                        anchor++;\r\n                        return [3 /*break*/, 5];\r\n                    case 10:\r\n                        col++;\r\n                        return [3 /*break*/, 4];\r\n                    case 11:\r\n                        row++;\r\n                        return [3 /*break*/, 3];\r\n                    case 12:\r\n                        boxesTensor.dispose();\r\n                        scoresTensor.dispose();\r\n                        classScoresTensor.dispose();\r\n                        return [2 /*return*/, results];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.extractPredictedClass = function (classesTensor, pos) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var row, col, anchor, classesData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        row = pos.row, col = pos.col, anchor = pos.anchor;\r\n                        return [4 /*yield*/, classesTensor.array()];\r\n                    case 1:\r\n                        classesData = _a.sent();\r\n                        return [2 /*return*/, Array(this.config.classes.length).fill(0)\r\n                                .map(function (_, i) { return classesData[row][col][anchor][i]; })\r\n                                .map(function (classScore, label) { return ({\r\n                                classScore: classScore,\r\n                                label: label\r\n                            }); })\r\n                                .reduce(function (max, curr) { return max.classScore > curr.classScore ? max : curr; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.DEFAULT_FILTER_SIZES = [\r\n        3, 16, 32, 64, 128, 256, 512, 1024, 1024\r\n    ];\r\n    return TinyYolov2Base;\r\n}(NeuralNetwork));\r\nexport { TinyYolov2Base };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}