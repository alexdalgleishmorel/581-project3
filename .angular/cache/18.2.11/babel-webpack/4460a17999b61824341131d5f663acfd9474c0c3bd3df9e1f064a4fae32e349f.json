{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { residual, residualDown } from './residualLayer';\nvar FaceRecognitionNet = /** @class */function (_super) {\n  __extends(FaceRecognitionNet, _super);\n  function FaceRecognitionNet() {\n    return _super.call(this, 'FaceRecognitionNet') || this;\n  }\n  FaceRecognitionNet.prototype.forwardInput = function (input) {\n    var params = this.params;\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference');\n    }\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(150, true).toFloat();\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = convDown(normalized, params.conv32_down);\n      out = tf.maxPool(out, 3, 2, 'valid');\n      out = residual(out, params.conv32_1);\n      out = residual(out, params.conv32_2);\n      out = residual(out, params.conv32_3);\n      out = residualDown(out, params.conv64_down);\n      out = residual(out, params.conv64_1);\n      out = residual(out, params.conv64_2);\n      out = residual(out, params.conv64_3);\n      out = residualDown(out, params.conv128_down);\n      out = residual(out, params.conv128_1);\n      out = residual(out, params.conv128_2);\n      out = residualDown(out, params.conv256_down);\n      out = residual(out, params.conv256_1);\n      out = residual(out, params.conv256_2);\n      out = residualDown(out, params.conv256_down_out);\n      var globalAvg = out.mean([1, 2]);\n      var fullyConnected = tf.matMul(globalAvg, params.fc);\n      return fullyConnected;\n    });\n  };\n  FaceRecognitionNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            return [2 /*return*/, _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.computeFaceDescriptor = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, faceDescriptorTensors, faceDescriptorsForBatch;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, toNetInput(input)];\n          case 1:\n            netInput = _a.sent();\n            faceDescriptorTensors = tf.tidy(function () {\n              return tf.unstack(_this.forwardInput(netInput));\n            });\n            return [4 /*yield*/, Promise.all(faceDescriptorTensors.map(function (t) {\n              return t.data();\n            }))];\n          case 2:\n            faceDescriptorsForBatch = _a.sent();\n            faceDescriptorTensors.forEach(function (t) {\n              return t.dispose();\n            });\n            return [2 /*return*/, netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]];\n        }\n      });\n    });\n  };\n  FaceRecognitionNet.prototype.getDefaultModelName = function () {\n    return 'face_recognition_model';\n  };\n  FaceRecognitionNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n  FaceRecognitionNet.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n  return FaceRecognitionNet;\n}(NeuralNetwork);\nexport { FaceRecognitionNet };","map":{"version":3,"names":["__awaiter","__extends","__generator","tf","toNetInput","NeuralNetwork","normalize","convDown","extractParams","extractParamsFromWeigthMap","residual","residualDown","FaceRecognitionNet","_super","call","prototype","forwardInput","input","params","Error","tidy","batchTensor","toBatchTensor","toFloat","meanRgb","normalized","div","scalar","out","conv32_down","maxPool","conv32_1","conv32_2","conv32_3","conv64_down","conv64_1","conv64_2","conv64_3","conv128_down","conv128_1","conv128_2","conv256_down","conv256_1","conv256_2","conv256_down_out","globalAvg","mean","fullyConnected","matMul","fc","forward","_a","_b","label","apply","sent","computeFaceDescriptor","netInput","faceDescriptorTensors","faceDescriptorsForBatch","_this","unstack","Promise","all","map","t","data","forEach","dispose","isBatchInput","getDefaultModelName","weightMap","weights"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/faceRecognitionNet/FaceRecognitionNet.js"],"sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { normalize } from '../ops';\r\nimport { convDown } from './convLayer';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { residual, residualDown } from './residualLayer';\r\nvar FaceRecognitionNet = /** @class */ (function (_super) {\r\n    __extends(FaceRecognitionNet, _super);\r\n    function FaceRecognitionNet() {\r\n        return _super.call(this, 'FaceRecognitionNet') || this;\r\n    }\r\n    FaceRecognitionNet.prototype.forwardInput = function (input) {\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('FaceRecognitionNet - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(150, true).toFloat();\r\n            var meanRgb = [122.782, 117.001, 104.298];\r\n            var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\r\n            var out = convDown(normalized, params.conv32_down);\r\n            out = tf.maxPool(out, 3, 2, 'valid');\r\n            out = residual(out, params.conv32_1);\r\n            out = residual(out, params.conv32_2);\r\n            out = residual(out, params.conv32_3);\r\n            out = residualDown(out, params.conv64_down);\r\n            out = residual(out, params.conv64_1);\r\n            out = residual(out, params.conv64_2);\r\n            out = residual(out, params.conv64_3);\r\n            out = residualDown(out, params.conv128_down);\r\n            out = residual(out, params.conv128_1);\r\n            out = residual(out, params.conv128_2);\r\n            out = residualDown(out, params.conv256_down);\r\n            out = residual(out, params.conv256_1);\r\n            out = residual(out, params.conv256_2);\r\n            out = residualDown(out, params.conv256_down_out);\r\n            var globalAvg = out.mean([1, 2]);\r\n            var fullyConnected = tf.matMul(globalAvg, params.fc);\r\n            return fullyConnected;\r\n        });\r\n    };\r\n    FaceRecognitionNet.prototype.forward = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    FaceRecognitionNet.prototype.computeFaceDescriptor = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var netInput, faceDescriptorTensors, faceDescriptorsForBatch;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, toNetInput(input)];\r\n                    case 1:\r\n                        netInput = _a.sent();\r\n                        faceDescriptorTensors = tf.tidy(function () { return tf.unstack(_this.forwardInput(netInput)); });\r\n                        return [4 /*yield*/, Promise.all(faceDescriptorTensors.map(function (t) { return t.data(); }))];\r\n                    case 2:\r\n                        faceDescriptorsForBatch = _a.sent();\r\n                        faceDescriptorTensors.forEach(function (t) { return t.dispose(); });\r\n                        return [2 /*return*/, netInput.isBatchInput\r\n                                ? faceDescriptorsForBatch\r\n                                : faceDescriptorsForBatch[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    FaceRecognitionNet.prototype.getDefaultModelName = function () {\r\n        return 'face_recognition_model';\r\n    };\r\n    FaceRecognitionNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap);\r\n    };\r\n    FaceRecognitionNet.prototype.extractParams = function (weights) {\r\n        return extractParams(weights);\r\n    };\r\n    return FaceRecognitionNet;\r\n}(NeuralNetwork));\r\nexport { FaceRecognitionNet };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}