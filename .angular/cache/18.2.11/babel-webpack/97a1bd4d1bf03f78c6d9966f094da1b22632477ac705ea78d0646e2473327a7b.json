{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function (_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3 /*break*/, 5];\n          if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\n          return [4 /*yield*/, extractFaceTensors(input, faceBoxes)];\n        case 1:\n          _b = _c.sent();\n          return [3 /*break*/, 4];\n        case 2:\n          return [4 /*yield*/, extractFaces(input, faceBoxes)];\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n        case 4:\n          _a = _b;\n          _c.label = 5;\n        case 5:\n          faces = _a;\n          return [4 /*yield*/, computeResults(faces)];\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2 /*return*/, results];\n      }\n    });\n  });\n}\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n    return __generator(this, function (_a) {\n      return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2 /*return*/, computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}","map":{"version":3,"names":["__awaiter","__generator","tf","extractFaces","extractFaceTensors","isWithFaceLandmarks","extractAllFacesAndComputeResults","parentResults","input","computeResults","extractedFaces","getRectForAlignment","_a","alignedRect","faceBoxes","faces","_b","results","_c","label","map","parentResult","detection","Tensor","sent","forEach","f","dispose","extractSingleFaceAndComputeResult","computeResult","_this"],"sources":["/Users/alexdalgleishmorel/Desktop/UofC/FALL 24/581/581-project3/node_modules/face-api.js/build/es6/globalApi/extractFacesAndComputeResults.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { extractFaces, extractFaceTensors } from '../dom';\r\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\r\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\r\n    if (getRectForAlignment === void 0) { getRectForAlignment = function (_a) {\r\n        var alignedRect = _a.alignedRect;\r\n        return alignedRect;\r\n    }; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var faceBoxes, faces, _a, _b, results;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    faceBoxes = parentResults.map(function (parentResult) {\r\n                        return isWithFaceLandmarks(parentResult)\r\n                            ? getRectForAlignment(parentResult)\r\n                            : parentResult.detection;\r\n                    });\r\n                    _a = extractedFaces;\r\n                    if (_a) return [3 /*break*/, 5];\r\n                    if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, extractFaceTensors(input, faceBoxes)];\r\n                case 1:\r\n                    _b = _c.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2: return [4 /*yield*/, extractFaces(input, faceBoxes)];\r\n                case 3:\r\n                    _b = _c.sent();\r\n                    _c.label = 4;\r\n                case 4:\r\n                    _a = (_b);\r\n                    _c.label = 5;\r\n                case 5:\r\n                    faces = _a;\r\n                    return [4 /*yield*/, computeResults(faces)];\r\n                case 6:\r\n                    results = _c.sent();\r\n                    faces.forEach(function (f) { return f instanceof tf.Tensor && f.dispose(); });\r\n                    return [2 /*return*/, results];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                    return [2 /*return*/, computeResult(faces[0])];\r\n                }); }); }, extractedFaces, getRectForAlignment)];\r\n        });\r\n    });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}